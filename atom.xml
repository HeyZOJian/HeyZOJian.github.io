<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-02-08T09:26:18.989Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Django REST framework 教程2：请求和响应</title>
    <link href="http://yoursite.com/2018/02/08/Django-REST-framework-%E6%95%99%E7%A8%8B2%EF%BC%9A%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94/"/>
    <id>http://yoursite.com/2018/02/08/Django-REST-framework-教程2：请求和响应/</id>
    <published>2018-02-08T07:53:11.000Z</published>
    <updated>2018-02-08T09:26:18.989Z</updated>
    
    <content type="html"><![CDATA[<p>这一篇我们开始讲解RESTframework框架的核心内容。让我们介绍一些基本的构建模块。<br><a id="more"></a></p><h2 id="Request对象"><a href="#Request对象" class="headerlink" title="Request对象"></a>Request对象</h2><p>REST framework引入了<code>Request</code>对象，它继承自常规的<code>HttpRequest</code>，并提供更加灵活的请求解析。<code>Request</code>对象的核心功能是<code>request.data</code>参数，类似于<code>request.POST</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">request.POST  <span class="comment"># 只能处理表单数据.  只能处理‘POST’请求</span></div><div class="line">request.data  <span class="comment"># 处理任何数据.  处理‘POST’,'PUT',‘PATCH’.</span></div></pre></td></tr></table></figure><h2 id="Response对象"><a href="#Response对象" class="headerlink" title="Response对象"></a>Response对象</h2><p>REST framework也引入了<code>Response</code>对象，使用内容协商来决定返回给客户端的数据类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> Response(data)  <span class="comment"># 返回客户端请求的数据类型</span></div></pre></td></tr></table></figure><h2 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h2><p>在视图中使用纯数字的HTTP状态码可读性差，并且不容易发现错误。REST framework为每个状态码提供了明确的标识符，例如<code>status</code>模块中的<code>HTTP_400_BAD_REQUEST</code>。</p><h2 id="装饰API视图"><a href="#装饰API视图" class="headerlink" title="装饰API视图"></a>装饰API视图</h2><p>REST framework提供了两个可用于编写视图API的封装：</p><ol><li><code>@api_view</code>装饰视图函数</li><li><code>APIView</code>类可用作视图的基类</li></ol><p>这些封装提供了一些额外的功能，例如确保了你的视图接受到<code>Request</code>实例，执行内容协商，并且把内容添加到<code>Response</code>对象中。</p><p>也会适当得返回<code>405 Method Not Allowed</code>响应，以及处理<code>request.data</code>格式不正确的<code>ParseError</code>异常。</p><h2 id="把他们整合在一起"><a href="#把他们整合在一起" class="headerlink" title="把他们整合在一起"></a>把他们整合在一起</h2><p>让我们继续使用这些新组件写一些视图函数。</p><p>在<code>views.py</code>中我们不再需要<code>JSONResponse</code>类,所以删了它。完成后我们可以对我们的视图函数进行轻微的重构了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</div><div class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> api_view</div><div class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</div><div class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet</div><div class="line"><span class="keyword">from</span> snippets.serializers <span class="keyword">import</span> SnippetSerializer</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@api_view(['GET', 'POST'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">snippet_list</span><span class="params">(request)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    List all code snippets, or create a new snippet.</div><div class="line">    """</div><div class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</div><div class="line">        snippets = Snippet.objects.all()</div><div class="line">        serializer = SnippetSerializer(snippets, many=<span class="keyword">True</span>)</div><div class="line">        <span class="keyword">return</span> Response(serializer.data)</div><div class="line"></div><div class="line">    <span class="keyword">elif</span> request.method == <span class="string">'POST'</span>:</div><div class="line">        serializer = SnippetSerializer(data=request.data)</div><div class="line">        <span class="keyword">if</span> serializer.is_valid():</div><div class="line">            serializer.save()</div><div class="line">            <span class="keyword">return</span> Response(serializer.data, status=status.HTTP_201_CREATED)</div><div class="line">        <span class="keyword">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</div></pre></td></tr></table></figure><p>我们改进了之前的例子。变得更加简洁，代码风格也跟Forms API很像，同时使用了命名的状态码这使得响应内容更加明确。</p><p>单个页面的视图函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@api_view(['GET', 'PUT', 'DELETE'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">snippet_detail</span><span class="params">(request, pk)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    Retrieve, update or delete a code snippet.</div><div class="line">    """</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        snippet = Snippet.objects.get(pk=pk)</div><div class="line">    <span class="keyword">except</span> Snippet.DoesNotExist:</div><div class="line">        <span class="keyword">return</span> Response(status=status.HTTP_404_NOT_FOUND)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</div><div class="line">        serializer = SnippetSerializer(snippet)</div><div class="line">        <span class="keyword">return</span> Response(serializer.data)</div><div class="line"></div><div class="line">    <span class="keyword">elif</span> request.method == <span class="string">'PUT'</span>:</div><div class="line">        serializer = SnippetSerializer(snippet, data=request.data)</div><div class="line">        <span class="keyword">if</span> serializer.is_valid():</div><div class="line">            serializer.save()</div><div class="line">            <span class="keyword">return</span> Response(serializer.data)</div><div class="line">        <span class="keyword">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</div><div class="line"></div><div class="line">    <span class="keyword">elif</span> request.method == <span class="string">'DELETE'</span>:</div><div class="line">        snippet.delete()</div><div class="line">        <span class="keyword">return</span> Response(status=status.HTTP_204_NO_CONTENT)</div></pre></td></tr></table></figure><p>应该感觉非常熟悉-这个普通的Django视图没什么不同。</p><p>注意到，我们没有明确请求或响应的数据类型。<code>request.data</code>可以处理传进来的<code>json</code>请求，也可以处理其他数据格式。同样，我们返回包含数据的响应时，REST framework会将数据渲染成恰当的数据格式。</p><h2 id="给URLs添加可选的格式后缀"><a href="#给URLs添加可选的格式后缀" class="headerlink" title="给URLs添加可选的格式后缀"></a>给URLs添加可选的格式后缀</h2><p>利用上面的特性，我们的响应可以返回多种数据类型，让我们为API端点添加格式后缀的支持。意味着我们的API可以出来这种URLs <a href="http://example.com/api/items/4.json" target="_blank" rel="external">http://example.com/api/items/4.json</a>.</p><p>给所有的视图函数添加<code>format</code>关键字参数，就像</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">snippet_list</span><span class="params">(request, format=None)</span>:</span></div></pre></td></tr></table></figure><p>和</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">snippet_detail</span><span class="params">(request, pk, format=None)</span>:</span></div></pre></td></tr></table></figure><p>现在更新一下<code>snippets/urls.py</code>文件，将现有的URLs添加到一组<code>format_suffix_patterns</code>中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</div><div class="line"><span class="keyword">from</span> snippets <span class="keyword">import</span> views</div><div class="line"><span class="keyword">from</span> rest_framework.urlpatterns <span class="keyword">import</span> format_suffix_patterns</div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    path(<span class="string">'snippets/'</span>, views.snippet_list),</div><div class="line">    path(<span class="string">'snippets/&lt;int:pk&gt;/'</span>, views.snippet_detail),</div><div class="line">]</div><div class="line"></div><div class="line">urlpatterns = format_suffix_patterns(urlpatterns)</div></pre></td></tr></table></figure><p>它提供了一种简单的引用方式，因此我们不需要再添加额外的url模式。</p><h2 id="看起来怎么样？"><a href="#看起来怎么样？" class="headerlink" title="看起来怎么样？"></a>看起来怎么样？</h2><p>继续在命令行中测试我们的API。一切好像没什么变化，除了我们发生无效的请求时多了一些很好的错误处理。</p><p>我们可以像之前一样获得所有代码片段。</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">http http://127.0.0.1:8000/snippets/</div><div class="line"></div><div class="line">HTTP/1.1 200 OK</div><div class="line">...</div><div class="line">[</div><div class="line">  &#123;</div><div class="line">    "id": 1,</div><div class="line">    "title": "",</div><div class="line">    "code": "foo = \"bar\"\n",</div><div class="line">    "linenos": false,</div><div class="line">    "language": "python",</div><div class="line">    "style": "friendly"</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    "id": 2,</div><div class="line">    "title": "",</div><div class="line">    "code": "print \"hello, world\"\n",</div><div class="line">    "linenos": false,</div><div class="line">    "language": "python",</div><div class="line">    "style": "friendly"</div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure><p>使用<code>Accept</code>头部字段，我们可以控制响应的格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http http://127.0.0.1:8000/snippets/ Accept:application/json  # 请求JSON数据</div><div class="line">http http://127.0.0.1:8000/snippets/ Accept:text/html         # 请求HTML数据</div></pre></td></tr></table></figure><p>或者添加格式后缀：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http http://127.0.0.1:8000/snippets.json  # JSON 后缀</div><div class="line">http http://127.0.0.1:8000/snippets.api   # Browsable API suffix</div></pre></td></tr></table></figure><p>同样，也可以使用<code>Content-Type</code>头部字段设置我们所发送的数据的数据格式。</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"># POST 表单数据</div><div class="line">http --form POST http://127.0.0.1:8000/snippets/ code="print 123"</div><div class="line"></div><div class="line">&#123;</div><div class="line">  "id": 3,</div><div class="line">  "title": "",</div><div class="line">  "code": "print 123",</div><div class="line">  "linenos": false,</div><div class="line">  "language": "python",</div><div class="line">  "style": "friendly"</div><div class="line">&#125;</div><div class="line"></div><div class="line"># POST JSON数据</div><div class="line">http --json POST http://127.0.0.1:8000/snippets/ code="print 456"</div><div class="line"></div><div class="line">&#123;</div><div class="line">    "id": 4,</div><div class="line">    "title": "",</div><div class="line">    "code": "print 456",</div><div class="line">    "linenos": false,</div><div class="line">    "language": "python",</div><div class="line">    "style": "friendly"</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果你在上面的<code>http</code>命令前添加<code>--debug</code>，你还能在请求头部看到请求类型。</p><p>现在打开浏览器，访问 <a href="http://127.0.0.1:8000/snippets/" target="_blank" rel="external">http://127.0.0.1:8000/snippets/</a>.</p><h3 id="Browsability"><a href="#Browsability" class="headerlink" title="Browsability"></a>Browsability</h3><p>API的响应类型取决于客户端的请求，但是默认情况下，当浏览器请求一个资源时会返回一个HTML格式的响应。</p><p>拥有一个可浏览的API是一个巨大的可用性胜利，并且使开发和使用API更容易。它也大大降低了想要检查和使用您的API的其他开发人员的障碍</p><p>想要了解更多可查阅<a href="http://www.django-rest-framework.org/topics/browsable-api/" target="_blank" rel="external">browsable api</a></p><h2 id="下一步是什么？"><a href="#下一步是什么？" class="headerlink" title="下一步是什么？"></a>下一步是什么？</h2><p>在<a href="">教程3</a>，我们将会使用基于类的视图，并且学习如何通过视图减少大量的代码。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这一篇我们开始讲解RESTframework框架的核心内容。让我们介绍一些基本的构建模块。&lt;br&gt;
    
    </summary>
    
    
      <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
      <category term="Django REST framework" scheme="http://yoursite.com/tags/Django-REST-framework/"/>
    
      <category term="翻译" scheme="http://yoursite.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>Django REST framework教程1：序列化</title>
    <link href="http://yoursite.com/2018/02/07/Django-RESTful-framework%E6%95%99%E7%A8%8B1%EF%BC%9A%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://yoursite.com/2018/02/07/Django-RESTful-framework教程1：序列化/</id>
    <published>2018-02-07T14:10:46.000Z</published>
    <updated>2018-02-08T07:52:48.432Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>这个教程将创建一套简单的代码高亮的pastebin的Web API。一路上我们会介绍许多构建<code>REST frmaework</code>的组件，并且让你有一个全面的认识，这些组件是如何组建在一起的。<br><a id="more"></a><br>这个教程相当’深奥’，在开始学习之前你大概需要准备一些饼干和一杯你最爱的啤酒。你如果只是想快速了解，你可以查看之前的<a href="http://zojian.cn/2018/02/06/Django-RESTful-framework%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/" target="_blank" rel="external">快速入门</a>文档。</p><blockquote><p>注意：教程中的代码可以访问<a href="https://github.com/encode/rest-framework-tutorial" target="_blank" rel="external">github地址</a>，完整的代码：<a href="https://restframework.herokuapp.com/" target="_blank" rel="external">这里</a></p></blockquote><h2 id="设置新环境"><a href="#设置新环境" class="headerlink" title="设置新环境"></a>设置新环境</h2><p>在我们开始之前，我们会使用<code>virtualenv</code>创建一个新的虚拟环境。这可以很好的将我们的项目与其他项目隔离开。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">virtualenv env</div><div class="line">source env/bin/activate</div></pre></td></tr></table></figure><p>现在我们已经进入虚拟环境，我们可以安装一些依赖包了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">pip install django</div><div class="line">pip install djangorestframework</div><div class="line">pip install pygments  # 我们将使用这个使代码高亮</div></pre></td></tr></table></figure><blockquote><p>注意：退出虚拟环境可以输入<code>deactivate</code>。更多信息，请看<a href="http://www.virtualenv.org/en/latest/index.html" target="_blank" rel="external">virtualenv文档</a></p></blockquote><h2 id="准备开始"><a href="#准备开始" class="headerlink" title="准备开始"></a>准备开始</h2><p>我们已经准备开始敲代码了。开始前，让我们先创建一个新的项目。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd ~</div><div class="line">django-admin.py startproject tutorial</div><div class="line">cd tutorial</div></pre></td></tr></table></figure><p>一旦完成，我们可以创建一个app，我们将使用它来创建一套简单的Web API。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage.py startapp snippets</div></pre></td></tr></table></figure><p>我们需要将<code>snippets</code>app和<code>rest_framework</code>app添加到<code>INSTALLED_APPS</code>中。编辑<code>tutorial/settings.py</code>文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">INSTALLED_APPS = (</div><div class="line">    ...</div><div class="line">    <span class="string">'rest_framework'</span>,</div><div class="line">    <span class="string">'snippets.apps.SnippetsConfig'</span>,</div><div class="line">)</div></pre></td></tr></table></figure><p>Okay,我们已经准备好了~</p><h2 id="创建一个模型"><a href="#创建一个模型" class="headerlink" title="创建一个模型"></a>创建一个模型</h2><p>出于本教程的目的，我们首先创建一个简单的<code>Snippet</code>模块，用于存储代码片段。编辑<code>snippets/models.py</code>文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</div><div class="line"><span class="keyword">from</span> pygments.lexers <span class="keyword">import</span> get_all_lexers</div><div class="line"><span class="keyword">from</span> pygments.styles <span class="keyword">import</span> get_all_styles</div><div class="line"></div><div class="line">LEXERS = [item <span class="keyword">for</span> item <span class="keyword">in</span> get_all_lexers() <span class="keyword">if</span> item[<span class="number">1</span>]]</div><div class="line">LANGUAGE_CHOICES = sorted([(item[<span class="number">1</span>][<span class="number">0</span>], item[<span class="number">0</span>]) <span class="keyword">for</span> item <span class="keyword">in</span> LEXERS])</div><div class="line">STYLE_CHOICES = sorted((item, item) <span class="keyword">for</span> item <span class="keyword">in</span> get_all_styles())</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Snippet</span><span class="params">(models.Model)</span>:</span></div><div class="line">    created = models.DateTimeField(auto_now_add=<span class="keyword">True</span>)</div><div class="line">    title = models.CharField(max_length=<span class="number">100</span>, blank=<span class="keyword">True</span>, default=<span class="string">''</span>)</div><div class="line">    code = models.TextField()</div><div class="line">    linenos = models.BooleanField(default=<span class="keyword">False</span>)</div><div class="line">    language = models.CharField(choices=LANGUAGE_CHOICES, default=<span class="string">'python'</span>, max_length=<span class="number">100</span>)</div><div class="line">    style = models.CharField(choices=STYLE_CHOICES, default=<span class="string">'friendly'</span>, max_length=<span class="number">100</span>)</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        ordering = (<span class="string">'created'</span>,)</div></pre></td></tr></table></figure><p>同步数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">python manage.py makemigrations snippets</div><div class="line">python manage.py migrate</div></pre></td></tr></table></figure><h2 id="创建一个序列化器"><a href="#创建一个序列化器" class="headerlink" title="创建一个序列化器"></a>创建一个序列化器</h2><p>使用WebS API的第一件事就是提供一种将snippet实例序列化和反序列化成其他数据格式（如json）的方法。我们可以声明<code>serializers（序列化器）</code>来实现，这和Django的forms很像。在<code>snippets</code>的目录下创建一个<code>serializers.py</code>文件并添加如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</div><div class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet, LANGUAGE_CHOICES, STYLE_CHOICES</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnippetSerializer</span><span class="params">(serializers.Serializer)</span>:</span></div><div class="line">    id = serializers.IntegerField(read_only=<span class="keyword">True</span>)</div><div class="line">    title = serializers.CharField(required=<span class="keyword">False</span>, allow_blank=<span class="keyword">True</span>, max_length=<span class="number">100</span>)</div><div class="line">    code = serializers.CharField(style=&#123;<span class="string">'base_template'</span>: <span class="string">'textarea.html'</span>&#125;)</div><div class="line">    linenos = serializers.BooleanField(required=<span class="keyword">False</span>)</div><div class="line">    language = serializers.ChoiceField(choices=LANGUAGE_CHOICES, default=<span class="string">'python'</span>)</div><div class="line">    style = serializers.ChoiceField(choices=STYLE_CHOICES, default=<span class="string">'friendly'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self, validated_data)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        创建并返回一个Snippet实例</div><div class="line">        """</div><div class="line">        <span class="keyword">return</span> Snippet.objects.create(**validated_data)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, instance, validated_data)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        更新并返回一个已经存在Snippet实例</div><div class="line">        """</div><div class="line">        instance.title = validated_data.get(<span class="string">'title'</span>, instance.title)</div><div class="line">        instance.code = validated_data.get(<span class="string">'code'</span>, instance.code)</div><div class="line">        instance.linenos = validated_data.get(<span class="string">'linenos'</span>, instance.linenos)</div><div class="line">        instance.language = validated_data.get(<span class="string">'language'</span>, instance.language)</div><div class="line">        instance.style = validated_data.get(<span class="string">'style'</span>, instance.style)</div><div class="line">        instance.save()</div><div class="line">        <span class="keyword">return</span> instance</div></pre></td></tr></table></figure><p>序列化器的第一部分是定义序列化/反序列化的字段。<code>create（）</code>和<code>update（）</code>方法定义了当调用<code>serializer.save（）</code>是一个实例是如何被创建或更新的。</p><p>序列化器类(serializer)很像Django的<code>Form</code>，同时在各个字段中也包含了类似的验证标志，如<code>required</code>，<code>max_length</code>和<code>default</code>。</p><p>在某些情况下，字段标志也可以控制序列化后如何显示，例如渲染成HTML。上面的<code>{&#39;base_template&#39;: &#39;textarea.html&#39;}</code>标志等同于在Django<code>Form</code>类中使用<code>widget=widgets.Textarea</code>。这对于控制如何显示browsable API特别有用，正如我们将在教程后面看到的。</p><p>事实上，我们可以通过使用<code>ModelSerializer</code>类节省开发时间，稍后我们会看到，但是现在我们仍把注意力放在序列化器的明确定义上。</p><h2 id="使用序列化器"><a href="#使用序列化器" class="headerlink" title="使用序列化器"></a>使用序列化器</h2><p>我们先熟悉一下我们的新序列化器如何使用。进入Django shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage.py shell</div></pre></td></tr></table></figure><p>Okay,导入一些必要的东西，让我们创建两个代码片段<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet</div><div class="line"><span class="keyword">from</span> snippets.serializers <span class="keyword">import</span> SnippetSerializer</div><div class="line"><span class="keyword">from</span> rest_framework.renderers <span class="keyword">import</span> JSONRenderer</div><div class="line"><span class="keyword">from</span> rest_framework.parsers <span class="keyword">import</span> JSONParser</div><div class="line"></div><div class="line">snippet = Snippet(code=<span class="string">'foo = "bar"\n'</span>)</div><div class="line">snippet.save()</div><div class="line"></div><div class="line">snippet = Snippet(code=<span class="string">'print "hello, world"\n'</span>)</div><div class="line">snippet.save()</div></pre></td></tr></table></figure></p><p>我们现在已经有两个可用的代码片端实例，将其中一个序列化试试看。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">serializer = SnippetSerializer(snippet)</div><div class="line">serializer.data</div><div class="line"><span class="comment"># &#123;'id': 2, 'title': u'', 'code': u'print "hello, world"\n', 'linenos': False, 'language': u'python', 'style': u'friendly'&#125;</span></div></pre></td></tr></table></figure><p>我们已经将模型实例转换成Python原生的数据类型。为了完成序列化工作，我们将数据渲染成json。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">content = JSONRenderer().render(serializer.data)</div><div class="line">content</div><div class="line"><span class="comment"># '&#123;"id": 2, "title": "", "code": "print \\"hello, world\\"\\n", "linenos": false, "language": "python", "style": "friendly"&#125;'</span></div></pre></td></tr></table></figure><p>反序列化也一样。我们将流解析成Python原生类型…</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.utils.six <span class="keyword">import</span> BytesIO</div><div class="line"></div><div class="line">stream = BytesIO(content)</div><div class="line">data = JSONParser().parse(stream)</div></pre></td></tr></table></figure><p>…然后我们把原生类型还原成一个完整的对象实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">serializer = SnippetSerializer(data=data)</div><div class="line">serializer.is_valid()</div><div class="line"><span class="comment"># True</span></div><div class="line">serializer.validated_data</div><div class="line"><span class="comment"># OrderedDict([('title', ''), ('code', 'print "hello, world"\n'), ('linenos', False), ('language', 'python'), ('style', 'friendly')])</span></div><div class="line">serializer.save()</div><div class="line"><span class="comment"># &lt;Snippet: Snippet object&gt;</span></div></pre></td></tr></table></figure><p>注意表单类型的API是如何工作的。当我们使用序列化器写视图函数时，相似之处会变得更加明显。</p><p>我们也可以对一个querysets进行序列化。只需在序列化器的参数中添加一个<code>many=True</code>的标志。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">serializer = SnippetSerializer(Snippet.objects.all(), many=<span class="keyword">True</span>)</div><div class="line">serializer.data</div><div class="line"><span class="comment"># [OrderedDict([('id', 1), ('title', u''), ('code', u'foo = "bar"\n'), ('linenos', False), ('language', 'python'), ('style', 'friendly')]), OrderedDict([('id', 2), ('title', u''), ('code', u'print "hello, world"\n'), ('linenos', False), ('language', 'python'), ('style', 'friendly')]), OrderedDict([('id', 3), ('title', u''), ('code', u'print "hello, world"'), ('linenos', False), ('language', 'python'), ('style', 'friendly')])]</span></div></pre></td></tr></table></figure><h2 id="使用ModelSerializers"><a href="#使用ModelSerializers" class="headerlink" title="使用ModelSerializers"></a>使用ModelSerializers</h2><p>我们的<code>SnippetSerializer</code>类太臃肿了，要是能再简洁一点就更好了。</p><p>Django提供了<code>Form</code>类<code>ModelForm</code>类，同样的，RESTframework也有<code>Serializer</code>和<code>ModelSerializer</code>。</p><p>现在让我们用<code>ModelSerializer</code>重构我们序列化器吧。再次打开<code>snippets/serializer.py</code>，将<code>SnippetSetializer</code>类替换为一下代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnippetSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        model = Snippet</div><div class="line">        fields = (<span class="string">'id'</span>, <span class="string">'title'</span>, <span class="string">'code'</span>, <span class="string">'linenos'</span>, <span class="string">'language'</span>, <span class="string">'style'</span>)</div></pre></td></tr></table></figure><p>还有一个不错的特性就是你可以通过打印序列化器实例来查看所有字段信息。打开Django shell，输入一下命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> snippets.serializers <span class="keyword">import</span> SnippetSerializer</div><div class="line">serializer = SnippetSerializer()</div><div class="line">print(repr(serializer))</div><div class="line"><span class="comment"># SnippetSerializer():</span></div><div class="line"><span class="comment">#    id = IntegerField(label='ID', read_only=True)</span></div><div class="line"><span class="comment">#    title = CharField(allow_blank=True, max_length=100, required=False)</span></div><div class="line"><span class="comment">#    code = CharField(style=&#123;'base_template': 'textarea.html'&#125;)</span></div><div class="line"><span class="comment">#    linenos = BooleanField(required=False)</span></div><div class="line"><span class="comment">#    language = ChoiceField(choices=[('Clipper', 'FoxPro'), ('Cucumber', 'Gherkin'), ('RobotFramework', 'RobotFramework'), ('abap', 'ABAP'), ('ada', 'Ada')...</span></div><div class="line"><span class="comment">#    style = ChoiceField(choices=[('autumn', 'autumn'), ('borland', 'borland'), ('bw', 'bw'), ('colorful', 'colorful')...</span></div></pre></td></tr></table></figure><p>记住，<code>ModelSerializer</code>类并没有做什么特别的事情，它只是一个创建序列化器的捷径：</p><ul><li>自动判定字段类型</li><li>简单实现<code>create（）</code>和<code>update（）</code>方法</li></ul><h2 id="使用序列化器编写常规的Django视图"><a href="#使用序列化器编写常规的Django视图" class="headerlink" title="使用序列化器编写常规的Django视图"></a>使用序列化器编写常规的Django视图</h2><p>目前我们不会使用任何RESTframework的其他特性，我们只是编写Djang常规的视图函数。<br>编辑<code>snippets/views.py</code>文件，并添加以下代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse, JsonResponse</div><div class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> csrf_exempt</div><div class="line"><span class="keyword">from</span> rest_framework.renderers <span class="keyword">import</span> JSONRenderer</div><div class="line"><span class="keyword">from</span> rest_framework.parsers <span class="keyword">import</span> JSONParser</div><div class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet</div><div class="line"><span class="keyword">from</span> snippets.serializers <span class="keyword">import</span> SnippetSerializer</div></pre></td></tr></table></figure><p>首页是列出所有已存在的代码片段，或创建新的代码片段。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@csrf_exempt</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">snippet_list</span><span class="params">(request)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    List all code snippets, or create a new snippet.</div><div class="line">    """</div><div class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</div><div class="line">        snippets = Snippet.objects.all()</div><div class="line">        serializer = SnippetSerializer(snippets, many=<span class="keyword">True</span>)</div><div class="line">        <span class="keyword">return</span> JsonResponse(serializer.data, safe=<span class="keyword">False</span>)</div><div class="line"></div><div class="line">    <span class="keyword">elif</span> request.method == <span class="string">'POST'</span>:</div><div class="line">        data = JSONParser().parse(request)</div><div class="line">        serializer = SnippetSerializer(data=data)</div><div class="line">        <span class="keyword">if</span> serializer.is_valid():</div><div class="line">            serializer.save()</div><div class="line">            <span class="keyword">return</span> JsonResponse(serializer.data, status=<span class="number">201</span>)</div><div class="line">        <span class="keyword">return</span> JsonResponse(serializer.errors, status=<span class="number">400</span>)</div></pre></td></tr></table></figure><p>注意，因为我们希望允许没有CSRF令牌的客户端可以通过POST访问该视图，所以我们需要添加装饰器<code>csrf_exempt</code>。正常情况下你不该这么做，REST framework视图函数实际上还有比这更合理的解决方法，但目前这已经达到我们的目的了。</p><p>同样，我们创建一个显示单个代码片段的页面，允许搜索，更新和删除代码片段。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@csrf_exempt</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">snippet_detail</span><span class="params">(request, pk)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    Retrieve, update or delete a code snippet.</div><div class="line">    """</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        snippet = Snippet.objects.get(pk=pk)</div><div class="line">    <span class="keyword">except</span> Snippet.DoesNotExist:</div><div class="line">        <span class="keyword">return</span> HttpResponse(status=<span class="number">404</span>)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</div><div class="line">        serializer = SnippetSerializer(snippet)</div><div class="line">        <span class="keyword">return</span> JsonResponse(serializer.data)</div><div class="line"></div><div class="line">    <span class="keyword">elif</span> request.method == <span class="string">'PUT'</span>:</div><div class="line">        data = JSONParser().parse(request)</div><div class="line">        serializer = SnippetSerializer(snippet, data=data)</div><div class="line">        <span class="keyword">if</span> serializer.is_valid():</div><div class="line">            serializer.save()</div><div class="line">            <span class="keyword">return</span> JsonResponse(serializer.data)</div><div class="line">        <span class="keyword">return</span> JsonResponse(serializer.errors, status=<span class="number">400</span>)</div><div class="line"></div><div class="line">    <span class="keyword">elif</span> request.method == <span class="string">'DELETE'</span>:</div><div class="line">        snippet.delete()</div><div class="line">        <span class="keyword">return</span> HttpResponse(status=<span class="number">204</span>)</div></pre></td></tr></table></figure><p>最后我们需要整合这些视图。创建<code>snippets/urls.py</code>文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</div><div class="line"><span class="keyword">from</span> snippets <span class="keyword">import</span> views</div><div class="line"></div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    path(<span class="string">'snippets/'</span>, views.snippet_list),</div><div class="line">    path(<span class="string">'snippets/&lt;int:pk&gt;/'</span>, views.snippet_detail),</div><div class="line">]</div><div class="line"><span class="comment"># Django-2.0以下版本</span></div><div class="line"><span class="comment"># from django.conf.urls import url</span></div><div class="line"><span class="comment"># from snippets import views</span></div><div class="line"></div><div class="line"><span class="comment"># urlpatterns = [</span></div><div class="line"><span class="comment">#     url(r'^snippets/$', views.snippet_list),</span></div><div class="line"><span class="comment">#     url(r'^snippets/(?P&lt;pk&gt;[0-9]+)/$', views.snippet_detail),</span></div><div class="line"><span class="comment"># ]</span></div></pre></td></tr></table></figure><p>将上面的url配置整合到根url配置文件中<code>tutorial/urls.py</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</div><div class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</div><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> include</div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</div><div class="line">    path(<span class="string">''</span>, include(<span class="string">'snippets.urls'</span>)),</div><div class="line">]</div><div class="line"><span class="comment"># 2.0以下</span></div><div class="line"><span class="comment"># from django.conf.urls import url, include</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># urlpatterns = [</span></div><div class="line"><span class="comment">#     url(r'^', include('snippets.urls')),</span></div><div class="line"><span class="comment"># ]</span></div></pre></td></tr></table></figure><p>目前，我们还有许多边界条件没有处理。如果我们发送的json格式不正确，或者请求一个视图无法处理的方法时，我们会返回一个500 server error。</p><h2 id="测试我们在Web-API上的第一次尝试"><a href="#测试我们在Web-API上的第一次尝试" class="headerlink" title="测试我们在Web API上的第一次尝试"></a>测试我们在Web API上的第一次尝试</h2><p>现在我们可以启动服务器运行我们服务了。<br>先退出刚刚的shell…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">quit()</div></pre></td></tr></table></figure><p>…接着启动我们的服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">python manage.py runserver</div><div class="line"></div><div class="line">Validating models...</div><div class="line"></div><div class="line">0 errors found</div><div class="line">Django version 1.11, using settings &apos;tutorial.settings&apos;</div><div class="line">Development server is running at http://127.0.0.1:8000/</div><div class="line">Quit the server with CONTROL-C.</div></pre></td></tr></table></figure><p>在另一个终端窗口，来测试我们的服务。</p><p>我们可以使用<code>curl</code>或者<code>httpie</code>来测试。Httpie是由python实现的一款的http客户端。</p><p>你可以通过pip来安装它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install httpie</div></pre></td></tr></table></figure><p>接着，我们尝试获取所有代码片段的列表</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">http http://127.0.0.1:8000/snippets/</div><div class="line"></div><div class="line">HTTP/1.1 200 OK</div><div class="line">...</div><div class="line">[</div><div class="line">  &#123;</div><div class="line">    "id": 1,</div><div class="line">    "title": "",</div><div class="line">    "code": "foo = \"bar\"\n",</div><div class="line">    "linenos": false,</div><div class="line">    "language": "python",</div><div class="line">    "style": "friendly"</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    "id": 2,</div><div class="line">    "title": "",</div><div class="line">    "code": "print \"hello, world\"\n",</div><div class="line">    "linenos": false,</div><div class="line">    "language": "python",</div><div class="line">    "style": "friendly"</div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure><p>或者我们可以通过它的id来访问单个代码片段:</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">http http://127.0.0.1:8000/snippets/2/</div><div class="line"></div><div class="line">HTTP/1.1 200 OK</div><div class="line">...</div><div class="line">&#123;</div><div class="line">  "id": 2,</div><div class="line">  "title": "",</div><div class="line">  "code": "print \"hello, world\"\n",</div><div class="line">  "linenos": false,</div><div class="line">  "language": "python",</div><div class="line">  "style": "friendly"</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>同样地，你可以通过浏览器访问URLs来获得这些json数据。</p><h2 id="我们到什么程度了"><a href="#我们到什么程度了" class="headerlink" title="我们到什么程度了"></a>我们到什么程度了</h2><p>目前为止我们表现还不错，我们已经有了一个序列化的API，这感觉跟Django的表单API和一些常规的Django视图非常相似。</p><p>除了返回json数据，我们的视图没有做什么特别的事。还有一些边界条件的处理没有实现，但这仍是一个正常运行的Web API。</p><p>我们将在<a href="">教程2</a>开始改进它。</p><hr><p>原文：<a href="http://www.django-rest-framework.org/tutorial/1-serialization/#working-with-serializers" target="_blank" rel="external">http://www.django-rest-framework.org/tutorial/1-serialization/#working-with-serializers</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;这个教程将创建一套简单的代码高亮的pastebin的Web API。一路上我们会介绍许多构建&lt;code&gt;REST frmaework&lt;/code&gt;的组件，并且让你有一个全面的认识，这些组件是如何组建在一起的。&lt;br&gt;
    
    </summary>
    
    
      <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
      <category term="Django REST framework" scheme="http://yoursite.com/tags/Django-REST-framework/"/>
    
      <category term="翻译" scheme="http://yoursite.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>Django RESTful framework快速入门</title>
    <link href="http://yoursite.com/2018/02/06/Django-RESTful-framework%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2018/02/06/Django-RESTful-framework快速入门/</id>
    <published>2018-02-05T16:22:15.000Z</published>
    <updated>2018-02-08T07:52:36.170Z</updated>
    
    <content type="html"><![CDATA[<h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><p>我们会创建一套简单的API来允许管理员查看和编辑系统中的用户和用户组<br><a id="more"></a></p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>创建一个新的Django项目<code>tutorial</code>，然后创建一个新的app<code>quickstart</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># Create the project directory</div><div class="line">mkdir tutorial</div><div class="line">cd tutorial</div><div class="line"></div><div class="line"># Create a virtualenv to isolate our package dependencies locally</div><div class="line">virtualenv env</div><div class="line">source env/bin/activate  # On Windows use `env\Scripts\activate`</div><div class="line"></div><div class="line"># Install Django and Django REST framework into the virtualenv</div><div class="line">pip install django</div><div class="line">pip install djangorestframework</div><div class="line"></div><div class="line"># Set up a new project with a single application</div><div class="line">django-admin.py startproject tutorial .  # Note the trailing &apos;.&apos; character</div><div class="line">cd tutorial</div><div class="line">django-admin.py startapp quickstart</div><div class="line">cd ..</div></pre></td></tr></table></figure></p><p>项目的结果应该像这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">$ pwd</div><div class="line">&lt;some path&gt;/tutorial</div><div class="line">$ find .</div><div class="line">.</div><div class="line">./manage.py</div><div class="line">./tutorial</div><div class="line">./tutorial/__init__.py</div><div class="line">./tutorial/quickstart</div><div class="line">./tutorial/quickstart/__init__.py</div><div class="line">./tutorial/quickstart/admin.py</div><div class="line">./tutorial/quickstart/apps.py</div><div class="line">./tutorial/quickstart/migrations</div><div class="line">./tutorial/quickstart/migrations/__init__.py</div><div class="line">./tutorial/quickstart/models.py</div><div class="line">./tutorial/quickstart/tests.py</div><div class="line">./tutorial/quickstart/views.py</div><div class="line">./tutorial/settings.py</div><div class="line">./tutorial/urls.py</div><div class="line">./tutorial/wsgi.py</div></pre></td></tr></table></figure></p><p>这看起来可能有些不寻常，在项目目录中创建了应用程序。使用项目命名空间避免扩展模块的命名冲突。</p><p>现在第一次同步你的数据库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage.py migrate</div></pre></td></tr></table></figure></p><p>我们还将创建一个初始用户<code>user</code>，密码是<code>password123</code>。在稍后的例子中我们会认证该用户。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage.py createsuperuser --email admin@example.com --username admin</div></pre></td></tr></table></figure></p><p>一旦你建立一个数据库和一个初始用户并且已经准备好，打开app目录然后开始敲码…</p><h2 id="序列化器"><a href="#序列化器" class="headerlink" title="序列化器"></a>序列化器</h2><p>首先我们会定义一些序列号器。让我创建一个新的模块<code>tutorial/quickstart/serializers.py</code>我们将会使用它们来表示我们的数据。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User, Group</div><div class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserSerializer</span><span class="params">(serializers.HyperlinkedModelSerializer)</span>:</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        model = User</div><div class="line">        fields = (<span class="string">'url'</span>, <span class="string">'username'</span>, <span class="string">'email'</span>, <span class="string">'groups'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GroupSerializer</span><span class="params">(serializers.HyperlinkedModelSerializer)</span>:</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></div><div class="line">        model = Group</div><div class="line">        fields = (<span class="string">'url'</span>, <span class="string">'name'</span>)</div></pre></td></tr></table></figure></p><p>注意我们在这个例子中使用了超链接关系，通过<code>HyperlinkedModelSerializer</code>。你也可以使用主键和其他关系，但是超链接是良好的RESTful设计。</p><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>是的，我们最好写一些视图。打开<code>tutorial/quickstart/views.py</code>然后输入：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User, Group</div><div class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> viewsets</div><div class="line"><span class="keyword">from</span> tutorial.quickstart.serializers <span class="keyword">import</span> UserSerializer, GroupSerializer</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserViewSet</span><span class="params">(viewsets.ModelViewSet)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    API endpoint that allows users to be viewed or edited.</div><div class="line">    """</div><div class="line">    queryset = User.objects.all().order_by(<span class="string">'-date_joined'</span>)</div><div class="line">    serializer_class = UserSerializer</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GroupViewSet</span><span class="params">(viewsets.ModelViewSet)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    API endpoint that allows groups to be viewed or edited.</div><div class="line">    """</div><div class="line">    queryset = Group.objects.all()</div><div class="line">    serializer_class = GroupSerializer</div></pre></td></tr></table></figure></p><p>我们不是写许多视图，而是将所有常见的行为分组成类<code>ViewSets</code>。</p><p>如果我们需要，我们可以很容易的把这些分解为单独的视图，但是使用viewsets维护视图逻辑易于管理也非常简洁。</p><h2 id="URLs"><a href="#URLs" class="headerlink" title="URLs"></a>URLs</h2><p>Okay，现在让我将API接到URLs。打开<code>tutorial/urls.py</code>…<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url, include</div><div class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> routers</div><div class="line"><span class="keyword">from</span> tutorial.quickstart <span class="keyword">import</span> views</div><div class="line"></div><div class="line">router = routers.DefaultRouter()</div><div class="line">router.register(<span class="string">r'users'</span>, views.UserViewSet)</div><div class="line">router.register(<span class="string">r'groups'</span>, views.GroupViewSet)</div><div class="line"></div><div class="line"><span class="comment"># Wire up our API using automatic URL routing.</span></div><div class="line"><span class="comment"># Additionally, we include login URLs for the browsable API.</span></div><div class="line">urlpatterns = [</div><div class="line">    url(<span class="string">r'^'</span>, include(router.urls)),</div><div class="line">    url(<span class="string">r'^api-auth/'</span>, include(<span class="string">'rest_framework.urls'</span>, namespace=<span class="string">'rest_framework'</span>))</div><div class="line">]</div></pre></td></tr></table></figure></p><p>因为我们使用viewsets代替普通的视图，所以通过简单地将viewsets注册为一个路由类，我们可以为我们API自动地生成URL配置。</p><p>如果我们需要对API URLs有更多操作，我们可以使用普通的视图并且明确地编写URL配置文件。</p><p>最后，我们通过browsable API包含了默认的登陆和注销视图。这是可选的，但是如果你的API需要认证功能和你想使用browsable API，这将非常有用。</p><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><p>把<code>rest_framework</code>添加到<code>INSTALLED_APPS</code>。设置模块在<code>tutorial/settings.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">INSTALLED_APPS = (</div><div class="line">    ...</div><div class="line">    <span class="string">'rest_framework'</span>,</div><div class="line">)</div></pre></td></tr></table></figure><p>Okay，我们完成了。</p><hr><h2 id="测试我们的API"><a href="#测试我们的API" class="headerlink" title="测试我们的API"></a>测试我们的API</h2><p>我们现在准备测试我们刚刚创建的API。让我们通过命令行启动服务器。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage.py runserver</div></pre></td></tr></table></figure></p><p>我们可以访问我们的API，通过命令行或者使用工具：curl…<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">bash: curl -H &apos;Accept: application/json; indent=4&apos; -u admin:password123 http://127.0.0.1:8000/users/</div><div class="line">&#123;</div><div class="line">    &quot;count&quot;: 2,</div><div class="line">    &quot;next&quot;: null,</div><div class="line">    &quot;previous&quot;: null,</div><div class="line">    &quot;results&quot;: [</div><div class="line">        &#123;</div><div class="line">            &quot;email&quot;: &quot;admin@example.com&quot;,</div><div class="line">            &quot;groups&quot;: [],</div><div class="line">            &quot;url&quot;: &quot;http://127.0.0.1:8000/users/1/&quot;,</div><div class="line">            &quot;username&quot;: &quot;admin&quot;</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            &quot;email&quot;: &quot;tom@example.com&quot;,</div><div class="line">            &quot;groups&quot;: [                ],</div><div class="line">            &quot;url&quot;: &quot;http://127.0.0.1:8000/users/2/&quot;,</div><div class="line">            &quot;username&quot;: &quot;tom&quot;</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>或者使用httpie，命令行工具…<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">bash: http -a admin:password123 http://127.0.0.1:8000/users/</div><div class="line"></div><div class="line">HTTP/1.1 200 OK</div><div class="line">...</div><div class="line">&#123;</div><div class="line">    &quot;count&quot;: 2,</div><div class="line">    &quot;next&quot;: null,</div><div class="line">    &quot;previous&quot;: null,</div><div class="line">    &quot;results&quot;: [</div><div class="line">        &#123;</div><div class="line">            &quot;email&quot;: &quot;admin@example.com&quot;,</div><div class="line">            &quot;groups&quot;: [],</div><div class="line">            &quot;url&quot;: &quot;http://localhost:8000/users/1/&quot;,</div><div class="line">            &quot;username&quot;: &quot;paul&quot;</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            &quot;email&quot;: &quot;tom@example.com&quot;,</div><div class="line">            &quot;groups&quot;: [                ],</div><div class="line">            &quot;url&quot;: &quot;http://127.0.0.1:8000/users/2/&quot;,</div><div class="line">            &quot;username&quot;: &quot;tom&quot;</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>或者直接使用浏览器访问<code>http://127.0.0.1:8000/users/</code>…<br><img src="http://www.django-rest-framework.org/img/quickstart.png" alt=""></p><p>如果你使用浏览器，首先确保你已经通过右上角登陆。</p><p>好的，就是这么简单！</p><p>如果你想更深入了解，可以浏览<a href="http://www.django-rest-framework.org/#api-guide" target="_blank" rel="external">API guide</a></p><p>原文：<a href="http://www.django-rest-framework.org/tutorial/quickstart/#quickstart" target="_blank" rel="external">http://www.django-rest-framework.org/tutorial/quickstart/#quickstart</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;快速入门&quot;&gt;&lt;a href=&quot;#快速入门&quot; class=&quot;headerlink&quot; title=&quot;快速入门&quot;&gt;&lt;/a&gt;快速入门&lt;/h1&gt;&lt;p&gt;我们会创建一套简单的API来允许管理员查看和编辑系统中的用户和用户组&lt;br&gt;
    
    </summary>
    
    
      <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
      <category term="Django RESTful framewo" scheme="http://yoursite.com/tags/Django-RESTful-framewo/"/>
    
  </entry>
  
  <entry>
    <title>数据库建模</title>
    <link href="http://yoursite.com/2018/01/07/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BB%BA%E6%A8%A1/"/>
    <id>http://yoursite.com/2018/01/07/数据库建模/</id>
    <published>2018-01-07T02:51:38.000Z</published>
    <updated>2018-02-08T06:16:10.857Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-数据库设计过程"><a href="#一-数据库设计过程" class="headerlink" title="一.数据库设计过程"></a>一.数据库设计过程</h2><a id="more"></a><ol><li>需求分析</li><li>概念设计</li><li>逻辑设计</li><li>模式求精</li><li>物理设计</li><li>应用与安全设计</li></ol><h2 id="二-E-R模型基本概念-实体集-联系集-属性"><a href="#二-E-R模型基本概念-实体集-联系集-属性" class="headerlink" title="二.E-R模型基本概念(实体集,联系集,属性)"></a>二.E-R模型基本概念(实体集,联系集,属性)</h2><h3 id="1-实体与实体集"><a href="#1-实体与实体集" class="headerlink" title="1. 实体与实体集"></a>1. 实体与实体集</h3><h3 id="2-属性及其分类"><a href="#2-属性及其分类" class="headerlink" title="2. 属性及其分类"></a>2. 属性及其分类</h3><ol><li><strong>简单属性,复合属性</strong></li><li><strong>单值属性,多值属性</strong></li><li><strong>派生属性</strong></li></ol><h3 id="3-联系与联系集"><a href="#3-联系与联系集" class="headerlink" title="3. 联系与联系集"></a>3. 联系与联系集</h3><ol><li><strong>多联系</strong>:各实体之间可以有多种不同的联系.</li><li><strong>实体的角色</strong>:当同一个实体集在一个联系集中参与的次数大于一次,且每次以不同的角色参与时,要用显示的角色名定义一个实体参与联系的方式.</li><li><strong>联系集的度</strong>:联系集的实体集的数目.</li></ol><h2 id="三-约束"><a href="#三-约束" class="headerlink" title="三.约束"></a>三.约束</h2><h3 id="1-映射约束"><a href="#1-映射约束" class="headerlink" title="1. 映射约束"></a>1. 映射约束</h3><ol><li>一对一</li><li>一对多</li><li>多对一</li><li>多对多</li></ol><h3 id="2-码约束"><a href="#2-码约束" class="headerlink" title="2. 码约束"></a>2. 码约束</h3><h4 id="①实体集的码"><a href="#①实体集的码" class="headerlink" title="①实体集的码"></a>①实体集的码</h4><ol><li><strong>超码</strong>:唯一标识一个实体的一个或多个属性的集合.</li><li><strong>候选码</strong>:一个超码的任意真子集都不能成为超码,这样最小的超码成为候选码.</li><li><strong>主码</strong>:从多个候选码中选择一个作为实体集的主码.</li></ol><h4 id="②主码选择原则"><a href="#②主码选择原则" class="headerlink" title="②主码选择原则"></a>②主码选择原则</h4><ol><li>选择属性长度最短的候选码</li><li>尽量选择包含单个属性的码,而不是复合候选码</li><li>选择在数据库系统生命周期内属性值最少变化的候选码</li><li>选择在数据库系统生命周期内更可能包含唯一值的候选码</li></ol><h4 id="③联系集的码"><a href="#③联系集的码" class="headerlink" title="③联系集的码"></a>③联系集的码</h4><blockquote><p>每一个联系集必须存在候选码并选择其中的一个候选码作为主码</p></blockquote><p><strong>一对一联系集</strong>:主码可以使用任何一方实体集的主码<br><strong>一对多(多对一)联系集</strong>:主码由”多”的一方实体集的主码组成<br><strong>多对多联系集</strong>:主码由参与联系集中所有实体集的主码组成</p><h4 id="④联系集的属性安置"><a href="#④联系集的属性安置" class="headerlink" title="④联系集的属性安置"></a>④联系集的属性安置</h4><p><strong>一对一联系集的属性</strong>:可安置在任一边的实体集上<br><strong>一对多联系集的属性</strong>:可安置于联系集上,也可安置在多的那一边的实体集上<br><strong>多对多联系集的属性</strong>:只能安置在联系集上,不能放到相关联的实体集上</p><h3 id="3-依赖约束"><a href="#3-依赖约束" class="headerlink" title="3. 依赖约束"></a>3. 依赖约束</h3><p><strong>依赖实体集</strong>:联系中的一种实体的存在依赖于该联系集中联系的存在<br>    如:<strong>销货单</strong>实体集与<strong>商品销售</strong>联系集<br><strong>弱实体集</strong>:联系中的一种实体的存在依赖于其他实体集中实体的存在<br>    如:<strong>开课班</strong>实体集与<strong>课程</strong>实体集</p><h3 id="4-参与约束"><a href="#4-参与约束" class="headerlink" title="4. 参与约束"></a>4. 参与约束</h3><p>实体集与联系集:</p><ol><li>全部参与</li><li>部分参与</li></ol><h3 id="5-多值联系"><a href="#5-多值联系" class="headerlink" title="5. 多值联系"></a>5. 多值联系</h3><p>同一个给定的联系集中,相关联的相同实体之间可能存在多个联系,如<strong>客户</strong>与<strong>银行</strong>之间<strong>多对多</strong>贷款联系集,及同时一个<strong>银行</strong>可以向多个<strong>客户</strong>发放贷款的<strong>一对多</strong>联系集.</p><hr><h2 id="四-弱实体集"><a href="#四-弱实体集" class="headerlink" title="四.弱实体集"></a>四.弱实体集</h2><p>某些实体集的属性不足以形成主码,他们必须依赖于其他实体集的存在而存在.</p><p><strong>部分码</strong>:用来标识弱实体的属性<br>弱实体集中的实体是由标识实体集中的<strong>主码</strong>与其<strong>部分码</strong>共同标识.</p><h2 id="五-扩展E-R特征"><a href="#五-扩展E-R特征" class="headerlink" title="五.扩展E-R特征"></a>五.扩展E-R特征</h2><p><strong>1. 类的层次</strong><br>E-R模型使用实体集的继承和ISA联系来描述这种概念上的继承.<br>ISA关系可以从两个方向进行设计:<br>①自上而下,先设计父类实体集,再将父类具体化为其他子类<br>②自下而上,先具体化子类实体集,再将子类中的共同属性提取出来,泛化为父类</p><p><strong>2. 聚合</strong><br>聚合是一种抽象,它将一个联系集及其相关联的实体集抽象为一个<strong>联系实体集</strong>对待,然后建立该联系实体集与其他实体集之间的联系集.</p><h2 id="六-E-R建模问题"><a href="#六-E-R建模问题" class="headerlink" title="六.E-R建模问题"></a>六.E-R建模问题</h2><h3 id="E-R建模的基本原则"><a href="#E-R建模的基本原则" class="headerlink" title="E-R建模的基本原则"></a>E-R建模的基本原则</h3><p><strong>1.忠实性</strong>: 设计应忠实于应用需求<br><strong>2.简单性</strong>: 除非有绝对需要,否则不要在设计中增加更多成分<br><strong>3.避免冗余</strong>: 一个对象只存放在一个地方<br><strong>4.选择实体集还是属性</strong>:<br>①不可再分<br>②不能和其他实体相联系<br>满足上述两条规则均可作为属性对待<br><strong>5.选择实体集还是联系集</strong>:<br>实体集一般对应现实生活中实际存在的事物<br>联系集一般对应一种动作<br><strong>6.多元联系转化为二元联系</strong>:</p><h3 id="依赖约束的建模"><a href="#依赖约束的建模" class="headerlink" title="依赖约束的建模"></a>依赖约束的建模</h3><h3 id="多值联系的建模"><a href="#多值联系的建模" class="headerlink" title="多值联系的建模"></a>多值联系的建模</h3><ol><li>将多值联系建模为弱实体集</li><li>将多值联系建模为依赖实体集</li></ol><h2 id="E-R模型的表示"><a href="#E-R模型的表示" class="headerlink" title="E-R模型的表示"></a>E-R模型的表示</h2><ol><li>实体集:矩形</li><li>弱实体集:双矩形</li><li>属性:椭圆</li><li>多值属性:双椭圆</li><li>派生属性:虚线椭圆</li><li>联系(集):菱形</li><li>标识联系集:双菱形</li><li>属性与实体之间用连线表示</li><li>加下划线的属性为实体集的主码</li><li>虚下划线表示弱实体的部分码</li><li>“→”指向参与联系集中”一”方实体集,”-“指向参与联系集”多”方实体集</li><li>联系实体集:带菱形的矩形</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一-数据库设计过程&quot;&gt;&lt;a href=&quot;#一-数据库设计过程&quot; class=&quot;headerlink&quot; title=&quot;一.数据库设计过程&quot;&gt;&lt;/a&gt;一.数据库设计过程&lt;/h2&gt;
    
    </summary>
    
    
      <category term="review" scheme="http://yoursite.com/tags/review/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>乐观锁-悲观锁</title>
    <link href="http://yoursite.com/2017/05/21/%E4%B9%90%E8%A7%82%E9%94%81-%E6%82%B2%E8%A7%82%E9%94%81/"/>
    <id>http://yoursite.com/2017/05/21/乐观锁-悲观锁/</id>
    <published>2017-05-21T08:39:48.000Z</published>
    <updated>2018-02-08T06:15:35.475Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h2><p>对数据被外界修改持保守态度，在整个数据处理过程中，将数据处于<strong>锁定状态</strong>。其实现依靠数据库的锁机制，以保证操作最大程度的独占性。但随之而来的就是数据库性能的大量开销。<br>以<strong>MySQL InnoDB</strong>为例,当使用<code>SELECT FOR UPDATE</code>就会使用悲观锁，前提是把事务自动提交取消<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">set</span> autocommit = <span class="number">0</span>;</div></pre></td></tr></table></figure></p><p>使用悲观锁的原理就是，当我们在查询出信息后就把当前的数据锁定，直到我们修改完毕后再解锁。<br>根据查询条件的不同，锁定的范围也不同</p><ol><li>当查询条件中<strong>指定明确主键</strong>，并且有此数据——–行级锁（row lock）</li><li>当查询条件中<strong>指定明确主键</strong>，但无次数据———-无锁</li><li>当查询条件中<strong>无主键</strong>————————-表级锁（table lock）</li><li>当查询条件中<strong>主键不明确</strong>———————-表级锁（table lock）</li></ol><h2 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h2><p>乐观锁大多基于<strong>数据版本记录机制</strong>实现，即为数据增加一个版本标识，在基于数据库表的版本解决方案，一般是通过为数据库表增加一个 “version” 字段来实现。也可以采用另一种方式，同样是在需要乐观锁控制的table中增加一个字段，名称无所谓，字段类型使用时间戳timestamp中，<br><strong>操作步骤</strong></p><ol><li>读取出数据时，将此版本号（时间戳）一同读出</li><li>更新时，比较数据库中该数据当前的版本号和手上的版本号，不一致说明版本冲突，一致则OK，将版本号+1或者获取当前时间戳后将数据更新回数据库</li></ol><p><strong>缺点</strong><br>乐观锁机制往往基于系统中的数据存储逻辑，那么来自外部系统的更新操作不受我们系统的控制，因此可能会造成脏数据被更新到数据库中。<br><strong>解决</strong><br>如将乐观锁策略在数据库存储过程中实现，对外只开放基于此存储过程的数据更新途径，而不是将数据库表直接对外公开</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.36nu.com/post/162.html" target="_blank" rel="external">muyuren | mysql悲观锁详解</a></p><p><a href="https://www.36nu.com/post/163.html" target="_blank" rel="external">muyuren | mysql乐观锁详解</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;悲观锁&quot;&gt;&lt;a href=&quot;#悲观锁&quot; class=&quot;headerlink&quot; title=&quot;悲观锁&quot;&gt;&lt;/a&gt;悲观锁&lt;/h2&gt;&lt;p&gt;对数据被外界修改持保守态度，在整个数据处理过程中，将数据处于&lt;strong&gt;锁定状态&lt;/stro
      
    
    </summary>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate NotNull NotEmpty NotBlank区别</title>
    <link href="http://yoursite.com/2017/05/10/Hibernate-NotNull-NotEmpty-NotBlank%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2017/05/10/Hibernate-NotNull-NotEmpty-NotBlank区别/</id>
    <published>2017-05-10T12:28:48.000Z</published>
    <updated>2017-05-10T12:40:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="NotNull"><a href="#NotNull" class="headerlink" title="@NotNull"></a>@NotNull</h2><p>不允许为null，但可以是empty</p><h2 id="NotEmpty"><a href="#NotEmpty" class="headerlink" title="@NotEmpty"></a>@NotEmpty</h2><p>不允许为null且长度要大于0</p><h2 id="NotBlank"><a href="#NotBlank" class="headerlink" title="@NotBlank"></a>@NotBlank</h2><p>只能作用在String上，不能为null，而且调用trim()后，长度必须大于0</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">String name = <span class="keyword">null</span>;</div><div class="line">NotNull = <span class="keyword">false</span></div><div class="line">NotEmpty = <span class="keyword">false</span></div><div class="line">NotBlank = <span class="keyword">false</span></div><div class="line"></div><div class="line">String nam = <span class="string">""</span>;</div><div class="line">NotNull = <span class="keyword">true</span></div><div class="line">NotEmpty = <span class="keyword">false</span></div><div class="line">NotBlank = <span class="keyword">false</span></div><div class="line"></div><div class="line">String name = <span class="string">"  "</span>;</div><div class="line">NotNull = <span class="keyword">true</span></div><div class="line">NotEmpty = <span class="keyword">true</span></div><div class="line">NotBlank = <span class="keyword">false</span></div><div class="line"></div><div class="line">String name = <span class="string">"zojian"</span></div><div class="line">NotNull = <span class="keyword">true</span></div><div class="line">NotEmpty = <span class="keyword">true</span></div><div class="line">NotBlank = <span class="keyword">true</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;NotNull&quot;&gt;&lt;a href=&quot;#NotNull&quot; class=&quot;headerlink&quot; title=&quot;@NotNull&quot;&gt;&lt;/a&gt;@NotNull&lt;/h2&gt;&lt;p&gt;不允许为null，但可以是empty&lt;/p&gt;
&lt;h2 id=&quot;NotEmpty&quot;&gt;&lt;a href
      
    
    </summary>
    
    
      <category term="Hibernate" scheme="http://yoursite.com/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>Spring4基于注解加载properties文件方式</title>
    <link href="http://yoursite.com/2017/05/09/Spring4%E6%B3%A8%E5%85%A5properties%E6%96%87%E4%BB%B6%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/05/09/Spring4注入properties文件方式/</id>
    <published>2017-05-09T13:24:08.000Z</published>
    <updated>2017-05-09T13:28:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PropertySource注解"><a href="#PropertySource注解" class="headerlink" title="@PropertySource注解"></a>@PropertySource注解</h2><p>将properties配置文件中的值存储到Spring的 Environment中，Environment接口提供方法去读取配置文件中的值，参数是properties文件中定义的key值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:message.properties"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</div><div class="line"><span class="comment">//something</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="多个配置文件-PropertySources注解"><a href="#多个配置文件-PropertySources注解" class="headerlink" title="多个配置文件@PropertySources注解"></a>多个配置文件@PropertySources注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@PropertySources</span>(&#123;</div><div class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:config.properties"</span>),</div><div class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:db.properties"</span>)</div><div class="line">&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</div><div class="line"><span class="comment">//something</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="ignoreResourceNotFound属性"><a href="#ignoreResourceNotFound属性" class="headerlink" title="ignoreResourceNotFound属性"></a>ignoreResourceNotFound属性</h2><p>如果<em>*</em>.properties不存在或找不到,系统则会抛出异常FileNotFoundException。<br>但是ignoreResourceNotFound设为true之后会忽略找不到的文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@PropertySource</span>(value=<span class="string">"classpath:missing.properties"</span></div><div class="line">  ,ignoreResourceNotFound=<span class="keyword">true</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</div><div class="line"><span class="comment">//something</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;PropertySource注解&quot;&gt;&lt;a href=&quot;#PropertySource注解&quot; class=&quot;headerlink&quot; title=&quot;@PropertySource注解&quot;&gt;&lt;/a&gt;@PropertySource注解&lt;/h2&gt;&lt;p&gt;将properties配
      
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>[读薄系列]Java并发编程的艺术笔记</title>
    <link href="http://yoursite.com/2017/05/06/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/05/06/Java并发编程的艺术笔记/</id>
    <published>2017-05-06T12:59:04.000Z</published>
    <updated>2018-02-08T06:12:02.071Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-并发编程的挑战"><a href="#1-并发编程的挑战" class="headerlink" title="1.并发编程的挑战"></a>1.并发编程的挑战</h1><h2 id="什么是上下文切换"><a href="#什么是上下文切换" class="headerlink" title="什么是上下文切换"></a>什么是上下文切换</h2><p>CPU通过时间片分配算法循环执行任务[线程]，当任务执行完一个时间片后会切换到下一个任务，在切换前会保存上一个任务的状态，以便下次切换回来时可以再加载这个任务的状态。所以任务从<strong>保存</strong>到<strong>加载</strong>的过程就是一次上下文切换。</p><h2 id="如何减少上下文切换"><a href="#如何减少上下文切换" class="headerlink" title="如何减少上下文切换"></a>如何减少上下文切换</h2><ol><li>无锁并发编程：如数据取模分段，不同线程处理不同数据</li><li>CAS算法：Atomic包使用CAS算法来更新数据， 而不需要加锁</li><li>使用最少线程：避免创建不必要的线程，使得大多数线程处于等待状态</li><li>协程：在单线程里实现多任务调度，并在单线程里维持多个任务的切换</li></ol><h2 id="如何避免死锁"><a href="#如何避免死锁" class="headerlink" title="如何避免死锁"></a>如何避免死锁</h2><ol><li>避免一个线程同时获得多个锁</li><li>避免一个锁同时占用多个资源</li><li>限制加锁顺序</li><li>尝试使用定时锁 lock.tryLock(timeout)</li><li>对应数据库锁，加锁和解锁必须在同一个数据库连接里</li></ol><h1 id="2-Java并发机制底层实现原理"><a href="#2-Java并发机制底层实现原理" class="headerlink" title="2.Java并发机制底层实现原理"></a>2.Java并发机制底层实现原理</h1><h2 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h2><blockquote><p>轻量级的synchronized，在多处理器开发中保证了共享变量的“可见性”（当一个线程修改一个共享变量时，另一个线程能读到这个修改的值）<br>比synchronized的使用和执行成本低，因为它不会引起线程上下文的切换和调度</p></blockquote><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>为了提高处理速度，CPU不直接和内存进行通信，而是将系统内存的数据读到内部缓存（L1,L2,L3）后再操作，但操作完不确定何时会写回内存。这样可能导致其他CPU不能获取到共享变量的最新值。</p><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>在x86处理器下通过工具获取JIT编译器生成的汇编指令来看看对Volatile进行写操作CPU</p><table><thead><tr><th>类别</th><th>代码</th></tr></thead><tbody><tr><td>Java代码</td><td><code>instance = new Singleton(); //instance是volatile变量</code></td></tr><tr><td>汇编指令</td><td><code>0x01a3de1d: movb $0x0,0x1104800(%esi);0x01a3de24: lock addl $0x0,(%esp);</code></td></tr></tbody></table><p><strong>Lock前缀的命令作两件事：</strong></p><ol><li>将当前CPU缓存行的数据写回到内存</li><li>令其他CPU里缓存了该内存地址的数据失效</li></ol><p><strong>缓存一致性协议</strong><br>每个CPU通过嗅探在总线中传播的数据来检查自己的缓存的值是否过期，当CPU发现自己缓存行对应的内存地址被修改，就会将当前处理器的缓存行设置成无效状态，当CPU对这个数据进行修改操作时，会重新从系统内存中把数据读到CPU缓存中。</p><h3 id="使用优化"><a href="#使用优化" class="headerlink" title="使用优化"></a>使用优化</h3><p>LinkedTransferQueue部分源码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** head of the queue */</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">final</span> PaddedAtomicReference &lt; QNode &gt; head;</div><div class="line"></div><div class="line"><span class="comment">/** tail of the queue */</span></div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">final</span> PaddedAtomicReference &lt; QNode &gt; tail;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">PaddedAtomicReference</span> &lt; <span class="title">T</span> &gt; <span class="keyword">extends</span> <span class="title">AtomicReference</span> &lt; <span class="title">T</span> &gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// enough padding for 64bytes with 4byte refs </span></div><div class="line">    Object p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, pa, pb, pc, pd, pe;</div><div class="line"></div><div class="line">    PaddedAtomicReference(T r) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">super</span>(r);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicReference</span> &lt; <span class="title">V</span> &gt; <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> V value;</div><div class="line"></div><div class="line">    <span class="comment">//省略其他代码 ｝</span></div></pre></td></tr></table></figure></p><p>因为缓存行是64个字节且不支持部分填充缓存，这意味着，如果队头队尾不足64字节，有可能他们会读到同一个缓存行中，那么有可能在修改头结点时，会将整个缓存行锁定，使得其他CPU无法访问尾节点，导致效率低下。<br>在PaddedAtomicReference内部类中将共享变量追加到64字节，使得头结点和尾节点不会加载同一个缓存行，即不会互相锁定。</p><p><strong>不适合使用这种优化的情景</strong></p><ol><li>缓存行非64字节的CPU</li><li>共享变量不会被频繁地写</li></ol><h2 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h2><p><a href="http://www.cnblogs.com/paddix/p/5405678.html" target="_blank" rel="external">liuxiaopeng | Java并发编程：Synchronized底层优化（偏向锁、轻量级锁）</a></p><h2 id="原子操作"><a href="#原子操作" class="headerlink" title="原子操作"></a>原子操作</h2><blockquote><p>不可被中断的一个或一系列操作</p></blockquote><h3 id="CPU实现原子操作"><a href="#CPU实现原子操作" class="headerlink" title="CPU实现原子操作"></a>CPU实现原子操作</h3><h4 id="总线锁定"><a href="#总线锁定" class="headerlink" title="总线锁定"></a>总线锁定</h4><p>使用CPU提供的一个LOCK#信号，当一个CPU在总线上输出此信号时，其他CPU的请求将会被阻塞，那么该CPU就能独享共享内存了</p><h4 id="缓存锁定"><a href="#缓存锁定" class="headerlink" title="缓存锁定"></a>缓存锁定</h4><p>内存区域如果被缓存在处理器的缓存行中，并且在Lock操作期间被锁定，那么当它执行锁操作回写到内存时，处理器不需要在总线上声言LOCK#信号，而是修改内部的内存地址，通过缓存一致性机制保证操作的原子性。<br>例外：当操作的数据不能被缓存在处理器内部，或操作的数据跨多个缓存行，处理器会调用总线锁定。或者处理器不支持缓存</p><h3 id="Java实现原子操作"><a href="#Java实现原子操作" class="headerlink" title="Java实现原子操作"></a>Java实现原子操作</h3><h4 id="循环CAS（CompareAndSet-CompareAndSwap）"><a href="#循环CAS（CompareAndSet-CompareAndSwap）" class="headerlink" title="循环CAS（CompareAndSet|CompareAndSwap）"></a>循环CAS（CompareAndSet|CompareAndSwap）</h4><p>jvm中的CAS操作是基于处理器的CMPXCHG指令实现的，CAS存在三个问题：</p><ol><li>ABA问题（解决：使用版本号A-B-A变成1A-2B-3A）</li><li>循环时间长开销大</li><li>只能保证一个共享变量的原子操作（解决：AtomicReference类将多个变量放到一个对象中进行CAS操作）</li></ol><h4 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h4><p>锁机制保证了只有获得锁的线程才能操作锁定的内存区域</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-并发编程的挑战&quot;&gt;&lt;a href=&quot;#1-并发编程的挑战&quot; class=&quot;headerlink&quot; title=&quot;1.并发编程的挑战&quot;&gt;&lt;/a&gt;1.并发编程的挑战&lt;/h1&gt;&lt;h2 id=&quot;什么是上下文切换&quot;&gt;&lt;a href=&quot;#什么是上下文切换&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Java并发" scheme="http://yoursite.com/tags/Java%E5%B9%B6%E5%8F%91/"/>
    
      <category term="读薄系列" scheme="http://yoursite.com/tags/%E8%AF%BB%E8%96%84%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate缓存小结</title>
    <link href="http://yoursite.com/2017/05/03/Hibernate%E7%BC%93%E5%AD%98%E5%B0%8F%E7%BB%93/"/>
    <id>http://yoursite.com/2017/05/03/Hibernate缓存小结/</id>
    <published>2017-05-03T09:17:30.000Z</published>
    <updated>2017-05-03T11:53:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是缓存"><a href="#什么是缓存" class="headerlink" title="什么是缓存"></a>什么是缓存</h2><blockquote><p>缓存是介于应用程序和物理数据源之间，其作用是为了降低应用程序对物理数据源访问的频次，从而提高了应用的运行性能。缓存内的数据是对物理数据源中的数据的复制，应用程序在运行时从缓存读写数据，在特定的时刻或事件会同步缓存和物理数据源的数据。</p></blockquote><h2 id="一级缓存（会话级）"><a href="#一级缓存（会话级）" class="headerlink" title="一级缓存（会话级）"></a>一级缓存（会话级）</h2><ol><li>存放在session中，数据适用范围在当前session内</li><li>生命周期与当前session相同</li><li>默认启用</li><li>evict()方法：用于将某个对象从Session的一级缓存中清除</li><li>clear()方法：用于将一级缓存中的所有对象全部清楚</li></ol><h2 id="二级缓存（应用级）"><a href="#二级缓存（应用级）" class="headerlink" title="二级缓存（应用级）"></a>二级缓存（应用级）</h2><ol><li>数据可使用范围是当前应用的所有会话</li><li>默认不启用，选择性开启（默认是EHCache，其他二级缓存组件如：HashTable、OSCache、SwarmCache等。）</li><li>由sessionFactory控制</li></ol><h2 id="N-1次问题"><a href="#N-1次问题" class="headerlink" title="N+1次问题"></a>N+1次问题</h2><p>订单表(ORDERS)</p><table><thead><tr><th>ID</th><th>ORDER_NUMBER</th><th>CUSTOMER_ID</th></tr></thead><tbody><tr><td>1</td><td>TOM</td><td>1</td></tr><tr><td>2</td><td>TOM</td><td>1</td></tr><tr><td>3</td><td>JAY</td><td>2</td></tr><tr><td>4</td><td>ALICE</td><td>3</td></tr></tbody></table><p>客户表(CUSTOMERS)</p><table><thead><tr><th>ID</th><th>NAME</th></tr></thead><tbody><tr><td>1</td><td>TOM</td></tr><tr><td>2</td><td>JAY</td></tr><tr><td>3</td><td>ALICE</td></tr></tbody></table><p>订单表和客户表是多对一的关系，当检索所有客户时<br>将依次执行以下SQL语句</p><blockquote><p>select <em> from CUSTOMERS;<br>select </em> from ORDERS where CUSTOMER_ID=1;<br>select <em> from ORDERS where CUSTOMER_ID=2;<br>select </em> from ORDERS where CUSTOMER_ID=3;</p></blockquote><h2 id="N-1问题解决方案"><a href="#N-1问题解决方案" class="headerlink" title="N+1问题解决方案"></a>N+1问题解决方案</h2><ol><li>使用表连接查询 <code>select * from CUSTOMERS left outer join ORDERS on CUSTOMERS.ID=ORDERS.CUSTOMER_ID</code></li><li>使用延迟加载 <code>fetch = FetchType.lazy</code></li><li>在关联对象类上标注<code>@BatchSize(size=x)</code> , 设置管理对象查询时一次性查询多少条记录， 使转为为 1+n/x问题。（不推荐）</li></ol><h2 id="适用二级缓存的情况"><a href="#适用二级缓存的情况" class="headerlink" title="适用二级缓存的情况"></a>适用二级缓存的情况</h2><ol><li>数据不会被第三方修改（绕过ORM会使数据不一致）</li><li>数据大小在可接收范围之内（缓存会占用内存资源，占太多反而会降低性能）</li><li>数据更新频率低（频繁的同步缓存中数据也会降低性能）</li><li>非关键数据（正确性 高于 高性能）</li></ol><h2 id="query-list（）和query-iterator（）"><a href="#query-list（）和query-iterator（）" class="headerlink" title="query.list（）和query.iterator（）"></a>query.list（）和query.iterator（）</h2><ol><li>list（）不使用一级缓存，即每次调用都会向底层数据库查询，但是会将结果保存到一级缓存中</li><li>iterator（）会先执行一条语句向数据库取出符合条件的数据id，然后通过id在hibernate的一级缓存中查找是否存在该对象，如果存在则直接取出，如果没有则再次发出一条sql语句通过id取得对象（并且加入到缓存中），这样如果所有的id在缓存中都没有的话就会出现n+1条sql语句的问题。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是缓存&quot;&gt;&lt;a href=&quot;#什么是缓存&quot; class=&quot;headerlink&quot; title=&quot;什么是缓存&quot;&gt;&lt;/a&gt;什么是缓存&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;缓存是介于应用程序和物理数据源之间，其作用是为了降低应用程序对物理数据源访问的频次，从而提
      
    
    </summary>
    
    
      <category term="Hibernate" scheme="http://yoursite.com/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>可能会发生重定向的情况</title>
    <link href="http://yoursite.com/2017/03/30/%E5%8F%AF%E8%83%BD%E4%BC%9A%E5%8F%91%E7%94%9F%E9%87%8D%E5%AE%9A%E5%90%91%E7%9A%84%E6%83%85%E5%86%B5/"/>
    <id>http://yoursite.com/2017/03/30/可能会发生重定向的情况/</id>
    <published>2017-03-30T11:55:40.000Z</published>
    <updated>2018-02-08T06:15:28.939Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="一-永久搬离的资源"><a href="#一-永久搬离的资源" class="headerlink" title="一. 永久搬离的资源"></a>一. 永久搬离的资源</h2><p>访问的资源被<strong>（永久性）移动新的位置</strong>或者被<strong>（永久性）重命名</strong>，从而形成新的URL。Web服务器返回重定向响应告诉客户从新的地址获取资源，并且在访问新地址之前更新书签之类的信息。</p><h2 id="二-临时搬离的资源"><a href="#二-临时搬离的资源" class="headerlink" title="二. 临时搬离的资源"></a>二. 临时搬离的资源</h2><p>访问的资源被<strong>临时移走</strong>或<strong>临时重命名</strong>，服务器希望客户端重定向到新的位置上去，但由于资源的改变是临时的，所以服务器希望客户端将来还是可以回头去使用老的URL。不要对书签进行更新</p><h2 id="三-URL增强"><a href="#三-URL增强" class="headerlink" title="三. URL增强"></a>三. URL增强</h2><p>通过重定向来重写URL，往往用于嵌入上下文。[经过扩展和状态增强的URL称为“胖URL”]<br>客户端会跟随这个重定向信息，重新发起请求，但这次的请求会包含完整的、经过状态增强的URL，这是在事务间维护状态的一种有效的方法。</p><h2 id="四-负载均衡"><a href="#四-负载均衡" class="headerlink" title="四. 负载均衡"></a>四. 负载均衡</h2><p>如果一个超载的服务器收到一条请求，服务器可以将客户端的请求重定向到一个负载不太重的服务器上去。</p><h2 id="五-规范目录名称"><a href="#五-规范目录名称" class="headerlink" title="五. 规范目录名称"></a>五. 规范目录名称</h2><p>客户端请求的URI是一个不带尾部斜线的目录吗时，大多数Web服务器会将客户端重定向到一个加了斜线的URI上，这样相对链接就可以正常工作了。</p><h2 id="补充：状态码302，303，307的区别"><a href="#补充：状态码302，303，307的区别" class="headerlink" title="补充：状态码302，303，307的区别"></a>补充：状态码302，303，307的区别</h2><ul><li>302是HTTP/1.0的标准，303，307则是HTTP/1.1标准中对302的细化</li><li>302：如果客户端发出POST请求后，收到服务端的302状态码，那么不能自动的向新的URI发送重复请求，必须跟用户确认是否该重发，因为第二次POST时，环境可能已经发生变化（POST方法不是幂等的），POST操作会不符合用户预期</li><li>303：对于POST请求，它表示请求已经被处理，客户端可以接着使用GET方法去请求Location里的URI</li><li>307：对于POST请求，表示请求还没有被处理，客户端应该向Location里的URI重新发起POST请求</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;一-永久搬离的资源&quot;&gt;&lt;a href=&quot;#一-永久搬离的资源&quot; class=&quot;headerlink&quot; title=&quot;一. 永久搬离的资源&quot;&gt;&lt;/a&gt;一. 永久搬离的资源&lt;/h2&gt;&lt;p&gt;访问的资源被&lt;strong&gt;（永久性）移动新
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>[读薄系列]并查集</title>
    <link href="http://yoursite.com/2017/03/24/%E8%AF%BB%E8%96%84%E7%B3%BB%E5%88%97-%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <id>http://yoursite.com/2017/03/24/读薄系列-并查集/</id>
    <published>2017-03-24T14:57:04.000Z</published>
    <updated>2018-02-08T06:15:01.255Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是并查集"><a href="#什么是并查集" class="headerlink" title="什么是并查集"></a>什么是并查集</h2><a id="more"></a><p>一种树形结构，用于处理一些<strong>不相交集合</strong>的合并及查询问题<br>主要的两种操作：<br><strong>合并</strong>：合并两个集合<br><strong>查询</strong>：查询两个元素是否属于同一个集合</p><h2 id="存储集合中元素的关系"><a href="#存储集合中元素的关系" class="headerlink" title="存储集合中元素的关系"></a>存储集合中元素的关系</h2><p>用一个数组记录每一个元素的上一级是谁<br>例如fa[1]=2表示1号的上一级是2号<br>如果一个元素的上一级是自己，那么他就是这个集合的“老大”（用来唯一标识这个集合）<br><img src="http://okc9ihakz.bkt.clouddn.com/20170324213741.png?slimimage" alt=""></p><h2 id="查询元素属于哪个集合"><a href="#查询元素属于哪个集合" class="headerlink" title="查询元素属于哪个集合"></a>查询元素属于哪个集合</h2><p>假如现在4号元素想知道他属于哪一个集合，那么他会去问他的上一级，上一级又去问他的上一级，直到集合的“老大”<br><img src="http://okc9ihakz.bkt.clouddn.com/20170324215042.png?slimimage" alt=""><br>查询成功时，会按原路径返回结果<br><img src="http://okc9ihakz.bkt.clouddn.com/20170324215135.png?slimimage" alt=""></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(x!=fa[x])</div><div class="line">        <span class="keyword">return</span> find(fa[x]);</div><div class="line">    <span class="keyword">return</span> x;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="合并两个集合"><a href="#合并两个集合" class="headerlink" title="合并两个集合"></a>合并两个集合</h2><p>假如现在1号和5号所在的集合想合并，两个集合合并必须先问过两个集合的“老大”<br><img src="http://okc9ihakz.bkt.clouddn.com/1.png?slimimage" alt=""><br><img src="http://okc9ihakz.bkt.clouddn.com/2.png?slimimage" alt=""><br><img src="http://okc9ihakz.bkt.clouddn.com/3.png?slimimage" alt=""><br><img src="http://okc9ihakz.bkt.clouddn.com/4.png?slimimage" alt=""><br><img src="http://okc9ihakz.bkt.clouddn.com/5.png?slimimage" alt=""><br><img src="http://okc9ihakz.bkt.clouddn.com/6.png?slimimage" alt=""><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> fx = find(x);<span class="comment">//找“老大”</span></div><div class="line">    <span class="keyword">int</span> fy = find(y);</div><div class="line">    <span class="keyword">if</span>(fx!=fy)&#123;<span class="comment">//不属于同一个集合</span></div><div class="line">        fa[fx] = fy;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//合并成功</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//合并失败</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="路径压缩"><a href="#路径压缩" class="headerlink" title="路径压缩"></a>路径压缩</h2><p>在合并集合的过程是将两个集合的“老大”连接起来，谁当谁的上一级完全随机，所以最后树状结构完全有可能变成链状，这样查找效率就会比较低了。<br>最理想的情况就是所以人的直接上级就是“老大”了，一共两级结构，只有找一次便找到集合“老大”。<br>不一定要完全符合这个结构，只需尽量符合即可。</p><p>还是原来那个查找的例子<br><img src="http://okc9ihakz.bkt.clouddn.com/20170324215042.png?slimimage" alt=""><br>当将结果往下传递的过程中，随带把路径中的元素的直接上一级设为集合“老大”即可。最终变为<br><img src="http://okc9ihakz.bkt.clouddn.com/7.png?slimimage" alt=""></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(x!=fa[x])</div><div class="line">        <span class="keyword">return</span> fa[x] = find(fa[x]);</div><div class="line">    <span class="keyword">return</span> x;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是并查集&quot;&gt;&lt;a href=&quot;#什么是并查集&quot; class=&quot;headerlink&quot; title=&quot;什么是并查集&quot;&gt;&lt;/a&gt;什么是并查集&lt;/h2&gt;
    
    </summary>
    
    
      <category term="读薄系列" scheme="http://yoursite.com/tags/%E8%AF%BB%E8%96%84%E7%B3%BB%E5%88%97/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="并查集" scheme="http://yoursite.com/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>[读薄系列]RMQ问题之ST算法</title>
    <link href="http://yoursite.com/2017/03/23/RMQ%E9%97%AE%E9%A2%98%E4%B9%8BST%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2017/03/23/RMQ问题之ST算法/</id>
    <published>2017-03-23T01:54:29.000Z</published>
    <updated>2017-03-24T15:04:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是ST算法"><a href="#什么是ST算法" class="headerlink" title="什么是ST算法"></a>什么是ST算法</h2><p>ST（Sparse Table，稀疏表）是解决RMQ问题的经典在线算法<br>O(NlogN)预处理<br>O(1)查询<br>本质就是动态规划算法</p><h2 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h2><p>维护二维数组ST[n][n]，ST[i][j]表示i开始，长度为2<sup>j</sup>的子数组中的最值<br>在求ST[i][j]的最值时，将这段子数组切成两半，每段长度为2<sup>j-1</sup>，于是前面一段的最值为ST[i][j-1]，后面一段的最值为ST[i+2<sup>j-1</sup>][j-1]，即状态转移方程为<br><strong>ST[i][j] = max(ST[i][j-1], ST[i+2<sup>j-1</sup>][j-1])</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">initST</span><span class="params">()</span></span>&#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">        ST[i][<span class="number">0</span>] = num[i];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; (<span class="number">1</span>&lt;&lt;j) &lt;= n; j++)&#123;<span class="comment">//枚举长度</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i + (<span class="number">1</span>&lt;&lt;j) - <span class="number">1</span> &lt; n;i++)&#123;<span class="comment">//枚举起点</span></div><div class="line">            ST[i][j] = max(ST[i][j<span class="number">-1</span>], ST[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><p>由于每次查询的区间长度不一定是偶数，即不能直接用ST[i][j]表示，所以还需进一步处理。<br>对于查询区间[a，b]，我们将其分为两段长度相等（2<sup>k</sup>）的偶数区间,他们可能相交，但不影响最值的求解，即<br>(b-a)/2 ≤ 2<sup>k</sup> ≤ b-a+1<br>所以k的最小值为<strong>log<sub>2</sub>(b-a)</strong><br>即<br><strong>query(a, b) = max(ST[a][k], ST[b - (2<sup>k</sup> + 1)][k])</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> k = (<span class="keyword">int</span>)(<span class="built_in">log</span>(b-a+<span class="number">1.0</span>)/<span class="built_in">log</span>(<span class="number">2.0</span>));</div><div class="line">    <span class="keyword">return</span> max(ST[u][k],ST[b-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="动态修改"><a href="#动态修改" class="headerlink" title="动态修改"></a>动态修改</h2><p>当修改某个位置的数值时，需要将覆盖此位置的所有区间做相应的更新</p><ol><li>更新ST[i][0]</li><li>枚举长度 j=1；2<sup>j</sup> ≤ n；j++</li><li>枚举起点从以i为最后一个元素的区间到以i为起点的区间</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    ST[x][<span class="number">0</span>] = y;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; (<span class="number">1</span>&lt;&lt;j) &lt;= n; j++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = x-(<span class="number">1</span>&lt;&lt;j)+<span class="number">1</span> &gt; <span class="number">1</span> ? x-(<span class="number">1</span>&lt;&lt;j)+<span class="number">1</span> : <span class="number">1</span>; </div><div class="line">        i &lt;= x &amp;&amp; i + (<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span> &lt;= n; </div><div class="line">        i++)</div><div class="line">            ST[i][j] = max(ST[i][j<span class="number">-1</span>], ST[i + (<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是ST算法&quot;&gt;&lt;a href=&quot;#什么是ST算法&quot; class=&quot;headerlink&quot; title=&quot;什么是ST算法&quot;&gt;&lt;/a&gt;什么是ST算法&lt;/h2&gt;&lt;p&gt;ST（Sparse Table，稀疏表）是解决RMQ问题的经典在线算法&lt;br&gt;O(NlogN)预处理
      
    
    </summary>
    
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
      <category term="读薄系列" scheme="http://yoursite.com/tags/%E8%AF%BB%E8%96%84%E7%B3%BB%E5%88%97/"/>
    
      <category term="RMQ" scheme="http://yoursite.com/tags/RMQ/"/>
    
      <category term="ST" scheme="http://yoursite.com/tags/ST/"/>
    
  </entry>
  
  <entry>
    <title>[Codeforces777a]Shell Game</title>
    <link href="http://yoursite.com/2017/03/12/Codeforces777a-Shell-Game/"/>
    <id>http://yoursite.com/2017/03/12/Codeforces777a-Shell-Game/</id>
    <published>2017-03-12T04:48:51.000Z</published>
    <updated>2017-03-12T05:19:22.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="www.codeforces.com/contest/777/problem/A">题目传送门</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>游戏规则：三个杯子一个球，知道杯子交换的次数和最后球所在的位置，问初始球在哪一个杯子中。<br>杯子交换的规制：</p><ol><li>左边杯子和中间的杯子交换（第奇数次交换）</li><li>右边杯子和中间的杯子交换（第偶数次交换）</li></ol><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>由于杯子数目是固定的，且交换有规则，可以先尝试下前几次交换的情况<br>初始 0 1 2</p><ol><li>第一次交换 1 0 2</li><li>第二次交换 1 2 0</li><li>第三次交换 2 1 0</li><li>第四次交换 2 0 1</li><li>第五次交换 0 2 1</li><li>第六次交换 0 1 2</li></ol><p>发现6次交换后杯子又恢复到初始的位置<br>所以可以将这6种情况的位置情况存到一个二维数组ans[][]，根据交换次数n和最终位置x可得出初始位置是ans[n%6][x]</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> ans[<span class="number">7</span>][<span class="number">3</span>] = &#123;</div><div class="line"><span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,</div><div class="line"><span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,</div><div class="line"><span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,</div><div class="line"><span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,</div><div class="line"><span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>,</div><div class="line"><span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,</div><div class="line"><span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">__int64 n;</div><div class="line"><span class="keyword">int</span> x;</div><div class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; x) &#123;</div><div class="line">n %= <span class="number">6</span>;</div><div class="line"><span class="built_in">cout</span> &lt;&lt; ans[n][x] &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;www.codeforces.com/contest/777/problem/A&quot;&gt;题目传送门&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h2&gt;&lt;p&gt;游戏
      
    
    </summary>
    
    
      <category term="CodeForces" scheme="http://yoursite.com/tags/CodeForces/"/>
    
  </entry>
  
  <entry>
    <title>脑力游戏</title>
    <link href="http://yoursite.com/2017/03/11/%E8%84%91%E5%8A%9B%E6%B8%B8%E6%88%8F/"/>
    <id>http://yoursite.com/2017/03/11/脑力游戏/</id>
    <published>2017-03-11T02:04:52.000Z</published>
    <updated>2017-03-11T02:16:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="脑力游戏"><a href="#脑力游戏" class="headerlink" title="脑力游戏"></a>脑力游戏</h1><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定n个带锁的盒子和n把钥匙，每把钥匙对应着唯一的一个盒子。初始状态下每把钥匙分别放在不同的盒子中，且所有盒子是上锁的。可以通过“暴力”打开某些盒子，取出放在里面的钥匙，然后利用拿到的钥匙去开相应的盒子。问如果只允许“暴力”打开最多k个盒子，那么在多少种状态下，可以最终打开所有盒子。(1≤n≤100, 0≤k≤n)</p><h2 id="涉及知识点"><a href="#涉及知识点" class="headerlink" title="涉及知识点"></a>涉及知识点</h2><h3 id="置换"><a href="#置换" class="headerlink" title="置换"></a>置换</h3><h4 id="1-什么是置换"><a href="#1-什么是置换" class="headerlink" title="1.什么是置换"></a>1.什么是置换</h4><p>假设S={1,2,3,.., n}，σ是S上的双射函数，则S上的n元置换记为σ<br> $$<br> \left(<br> \begin{matrix}<br> 1 &amp; 2 &amp; … &amp; n \<br> σ(1) &amp; σ(2) &amp; … &amp; σ(n)<br> \end{matrix}<br> \right)<br>$$</p><h4 id="2-什么是轮换"><a href="#2-什么是轮换" class="headerlink" title="2.什么是轮换"></a>2.什么是轮换</h4><p>设σ是S上的n元置换，若σ(i<sub>1</sub>)=i<sub>2</sub>,σ(i<sub>2</sub>)=i<sub>3</sub> ,…, σ(i<sub>k-1</sub>)=i<sub>k</sub>,σ(i<sub>k</sub>)=i<sub>1</sub><br>且保持S中的其他元素不变，则称σ为S上的<strong>k阶轮换</strong>，记作(i<sub>1</sub> i<sub>2</sub> … i<sub>k</sub>),若k=2，称σ为S上的<strong>对换</strong>。</p><h4 id="3-置换和轮换的关系"><a href="#3-置换和轮换的关系" class="headerlink" title="3.置换和轮换的关系"></a>3.置换和轮换的关系</h4><p>任何n元置换可以分解为不相交的轮换之积。<br>$$<br> \left(<br> \begin{matrix}<br> 1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 &amp; 6 &amp; 7 &amp; 8 \<br> 5 &amp; 3 &amp; 6 &amp; 4 &amp; 2 &amp; 1 &amp; 8 &amp; 7<br> \end{matrix}<br> \right)<br>$$<br>拆成(1 5 2 3 6)(4)(7 8)</p><h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><h4 id="1-判断一个问题是否可以用动态规划解决"><a href="#1-判断一个问题是否可以用动态规划解决" class="headerlink" title="1.判断一个问题是否可以用动态规划解决"></a>1.判断一个问题是否可以用动态规划解决</h4><ol><li>具有最优子结构</li><li>具有重叠子问题</li><li>无后效性</li></ol><h4 id="2-什么是最优子结构"><a href="#2-什么是最优子结构" class="headerlink" title="2.什么是最优子结构"></a>2.什么是最优子结构</h4><ol><li>一个问题的最优解包含其子问题的最优解</li><li>局部最优解能解决全局最优解</li></ol><h4 id="3-什么重叠子问题"><a href="#3-什么重叠子问题" class="headerlink" title="3.什么重叠子问题"></a>3.什么重叠子问题</h4><ol><li>每次产生的子问题并不总是新问题，有些子问题会被重复计算多少</li><li>而分治产生的子问题都是相互独立的</li></ol><h4 id="4-什么是无后效性"><a href="#4-什么是无后效性" class="headerlink" title="4.什么是无后效性"></a>4.什么是无后效性</h4><ol><li>某个状态以后的过程不会影响到以前的过程</li></ol><h4 id="5-处理动态规划问题的步骤"><a href="#5-处理动态规划问题的步骤" class="headerlink" title="5.处理动态规划问题的步骤"></a>5.处理动态规划问题的步骤</h4><ol><li>定义最优子结构</li><li>把问题看作多阶段决策的过程来求解问题</li><li>递归定义最优解</li><li>按自定向上的方式解最优解</li></ol><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ol><li><p>n把钥匙的不同放置方法实际上对应1~n的不同的排列。</p></li><li><p>第一次暴力打开一个盒子会出现两种情况：</p><ol><li>拿到的钥匙是该暴力打开的盒子的钥匙。</li><li>拿着该钥匙打开另一个盒子，直到拿到第一次暴力打开的那个盒子的钥匙，而这实际上构成了一个循环。</li></ol></li></ol><ol><li><p>根据离散数学的角度，这里的每种排列情况对应着一个置换，每一个循环对应一个轮换。</p></li><li><p>所以问题转化成 n！个n元置换中，有多少个置换可以分解为不超过k个不相交的轮换。由于100！非常大，所以问题不能单纯的暴力算出答案，而且需要高精度整数运算。</p></li><li><p>f[i][j]表示i元置换中可以分解为j个不相交轮换的个数。</p></li><li><p>f[n][1] + f[n][2] + … + f[n][k]即为问题所求。所以预处理求出所有状态，再将符合题目要求的结果求和。</p></li><li><p>状态转移的时候有两种情况：</p><ol><li>前面i-1个元素组成j-1个轮换，第i个元素单独作为一个一元轮换。</li><li>前面i-1个元素组成j个轮换，第i个元素加入到前面的元素组成的某个轮换中，能加入的位置有i-1个。</li></ol></li></ol><ol><li><p>假设现在有3个元素，这会将隔出4个位置 1□2□3□4 但是位置1和位置4所构成的循环是相同的。</p></li><li><p>状态转移方程 f[i][j] = f[i-1][j-1] + f[i-1][j]*(i-1)，特殊边界情况f[0][0]=1,f[0][j]=0。</p></li></ol><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">preprocess</span><span class="params">()</span></span>&#123;</div><div class="line">f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= MAXN; i++)&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= MAXN; j++)&#123;</div><div class="line">f[i][j] = f[i<span class="number">-1</span>][j<span class="number">-1</span>] + f[i<span class="number">-1</span>][j]*(i<span class="number">-1</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;脑力游戏&quot;&gt;&lt;a href=&quot;#脑力游戏&quot; class=&quot;headerlink&quot; title=&quot;脑力游戏&quot;&gt;&lt;/a&gt;脑力游戏&lt;/h1&gt;&lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
      <category term="置换轮换" scheme="http://yoursite.com/tags/%E7%BD%AE%E6%8D%A2%E8%BD%AE%E6%8D%A2/"/>
    
  </entry>
  
  <entry>
    <title>[读薄系列]Merge Sort归并排序</title>
    <link href="http://yoursite.com/2017/03/10/Merge-Sort%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2017/03/10/Merge-Sort归并排序/</id>
    <published>2017-03-10T02:36:07.000Z</published>
    <updated>2017-03-24T15:04:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="排序基本思想"><a href="#排序基本思想" class="headerlink" title="排序基本思想"></a>排序基本思想</h2><h3 id="分割"><a href="#分割" class="headerlink" title="分割"></a>分割</h3><p>将序列递归折半分割</p><h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><p>回溯将之前被分割的两个序列<strong>合并后排序</strong></p><h3 id="排序过程"><a href="#排序过程" class="headerlink" title="排序过程"></a>排序过程</h3><p><strong>原始序列</strong> 9 6 7 2 5 1 8 4 2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">分割</div><div class="line">9 6 7 2     |     5 1 8 4 2</div><div class="line"></div><div class="line">9 6 | 7 2         5 1 | 8 4 2</div><div class="line"></div><div class="line">9 | 6   7 | 2     5 | 1   8 | 4 2</div><div class="line"></div><div class="line">9 | 6   7 | 2     5 | 1   8   4 | 2</div><div class="line"></div><div class="line">合并</div><div class="line">6 9 |  2 7        1 5 | 8 | 2 4</div><div class="line"></div><div class="line">2 6 7 9           1 5 | 2 4 8</div><div class="line"></div><div class="line">2 6 7 9           1 2 4 5 6</div><div class="line"></div><div class="line">1 2 2 4 5 6 7 8 9</div></pre></td></tr></table></figure></p><h3 id="如何合并"><a href="#如何合并" class="headerlink" title="如何合并"></a>如何合并</h3><p><strong>目标</strong><br>将包含n1个元素的数组L以及包含n2个元素的数组R，合并到数组A中</p><p><strong>利用的条件</strong><br>两个数组均已排好序</p><p><strong>合并过程</strong><br>每次从两个数组中取出一个元素进行比较，将小的那个元素放入数组A中，最后将各段中余下的部分直接复制到数组A中。<br>为了简化合并代码的实现，可以在两个数组末尾分别插入一个大于所有元素的标记。在比较L，R元素的过程中，肯定会遇到元素与标记相比较，知道标记设置得足够大，且将比较次数限制在n1+n2之内，就可以既防止两个标记比较，又防止循环变量i，j分别超过n1，n2.</p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p><strong>时间复杂度</strong><br>一般来说，n个数据大致会分为log<sub>2</sub>n层，由于每次合并的总复杂度是O(n)，因此归并排序整体的时间复杂度是O(nlog<sub>2</sub>n)</p><p><strong>空间复杂度</strong><br>由于合并需要复制到另一个数组，故空间复杂度为O(n)</p><p><strong>稳定性</strong><br>在合并两个已经排序的序列时，如果遇到相同的元素，只有保证前半部分数组优于后半部分数组，相同元素的顺序就不会颠倒了，因此归并排序属于<strong>稳定</strong>的排序算法</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>C++<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 500000</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SENTINEL 0x3f3f3f3f <span class="comment">//标记</span></span></div><div class="line"></div><div class="line"><span class="keyword">int</span> L[MAX/<span class="number">2</span>],R[MAX/<span class="number">2</span>+<span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> n, <span class="keyword">int</span> left,i nt mid, <span class="keyword">int</span> right)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n1 = mid-left;</div><div class="line">    <span class="keyword">int</span> n2 = right-mid;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n1; i++) L[i] = A[left+i];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n2; i++) R[i] = A[mid+i];</div><div class="line">    L[n1] = R[n2] = SENTINEL;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = left; k &lt; right; k++)&#123;</div><div class="line">        <span class="keyword">if</span>(L[i] &lt;= R[i])&#123;<span class="comment">//保证稳定性</span></div><div class="line">            A[k] = L[i++];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            A[k] = R[j++];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> n, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(left+<span class="number">1</span> &lt; right)&#123;</div><div class="line">        <span class="keyword">int</span> mid = (left + right)/<span class="number">2</span>;</div><div class="line">        <span class="comment">//分割</span></div><div class="line">        mergeSort(A, n, left, mid);</div><div class="line">        mergeSort(A, n, mid, right);</div><div class="line">        <span class="comment">//合并</span></div><div class="line">        merge(A, n, left, mid, right);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;排序基本思想&quot;&gt;&lt;a href=&quot;#排序基本思想&quot; class=&quot;headerlink&quot; title=&quot;排序基本思想&quot;&gt;&lt;/a&gt;排序基本思想&lt;/h2&gt;&lt;h3 id=&quot;分割&quot;&gt;&lt;a href=&quot;#分割&quot; class=&quot;headerlink&quot; title=&quot;分割&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="读薄系列" scheme="http://yoursite.com/tags/%E8%AF%BB%E8%96%84%E7%B3%BB%E5%88%97/"/>
    
      <category term="排序" scheme="http://yoursite.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>未来火车站建设</title>
    <link href="http://yoursite.com/2017/03/09/%E6%9C%AA%E6%9D%A5%E7%81%AB%E8%BD%A6%E7%AB%99%E5%BB%BA%E8%AE%BE/"/>
    <id>http://yoursite.com/2017/03/09/未来火车站建设/</id>
    <published>2017-03-09T15:08:21.000Z</published>
    <updated>2017-03-09T15:21:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="未来的火车网络建设"><a href="#未来的火车网络建设" class="headerlink" title="未来的火车网络建设"></a>未来的火车网络建设</h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定无向图，可以分为左、右两部,两图顶点数相等都为N（N&lt;=10），顶点都按1-N编号，开始时两图都为欧拉图（即图中每个点都为偶度点），后添加N条边，每条边都连接两图相同编号的顶点，这导致每个点都变为奇度点,即整个图不是欧拉图。图中所有的边都有权值，问如何复制现有的边使得整个图变为欧拉图（即所有顶点都为偶度点）且复制的边的总权值最小。</p><h2 id="涉及知识点"><a href="#涉及知识点" class="headerlink" title="涉及知识点"></a>涉及知识点</h2><h3 id="欧拉图"><a href="#欧拉图" class="headerlink" title="欧拉图"></a>欧拉图</h3><p>通过图（无向图或有向图）中所有边且每边仅通过一次通路称为欧拉通路，相应的回路称为欧拉回路。具有欧拉回路的图称为欧拉图（Euler Graph），具有欧拉通路而无欧拉回路的图称为半欧拉图。</p><h3 id="状态压缩"><a href="#状态压缩" class="headerlink" title="状态压缩"></a>状态压缩</h3><p>状态压缩指状态用一种压缩的形式存储。一般采用一个二进制数表示状态，有时也用三进制或四进制数等。<br>用二进制数表示状态最大的好处就是在决策转移时可以采用位运算，这样能极大提高算法效率。</p><h3 id="最短路径问题"><a href="#最短路径问题" class="headerlink" title="最短路径问题"></a>最短路径问题</h3><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ol><li><p>每条边最多只复制一次，对于奇偶性问题，同一条边复制两次对顶点的度数奇偶性的贡献相当于0。</p></li><li><p>连接左右两图的边很特殊，我们可以枚举选择当中的哪几条边，使得剩下的问题可以在左右两图内部各自解决而互不影响。 </p></li><li><p>连接这些特殊边后，左右两图的顶点的奇偶性会发生变化，这时候问题就变为他们各自内部怎么使用最少的花费来到达顶点的这种奇偶状态。</p></li><li><p>由于顶点数不超过10个，所有可以用一个10位的二进制数表示每种奇偶状态，1为奇数，0为偶数。初始状态下，所有点都为奇数度，所有二进制位都为1。</p></li><li><p>如果选择连接(i， j)这条边， 那么可以让状态x和y之间相互转换，其中在x和y的二进制表示中只有第i位和第j位不一样，然后将状态抽象为点，上述转换的代价作为边权构建新图，再对新图求以初始状态对应顶点为源的单源最短路径。</p></li></ol><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">()</span></span>&#123;<span class="comment">//求图g中各状态顶点间的最小变换花费</span></div><div class="line"><span class="built_in">memset</span>(G, <span class="number">-1</span>, <span class="keyword">sizeof</span>(G));<span class="comment">//初始化新矩阵G </span></div><div class="line"><span class="comment">//枚举变换前状态i</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n: i++)<span class="comment">//n=(1&lt;&lt;N)</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; N; j++)&#123;<span class="comment">//枚举复制边的端点j和k</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; N; k++)&#123;</div><div class="line"><span class="comment">//改状态i第j和k位的奇偶性</span></div><div class="line"><span class="comment">//并记录变换花费为边jk的权</span></div><div class="line">G[i][i^(<span class="number">1</span>&lt;&lt;j)^(<span class="number">1</span>&lt;&lt;k)] = g[j][k];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125; </div><div class="line">dijkstra();<span class="comment">//求出初始状态到其他任意状态的最小花费</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;<span class="comment">//枚举每个状态</span></div><div class="line"><span class="keyword">if</span>(d[i] &lt; INF)&#123;</div><div class="line">f[i] += d[i];<span class="comment">//记录初始状态到状态i的最小变换花费</span></div><div class="line">flag[i]++;<span class="comment">//记录有几个图能够到达状态i</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;<span class="comment">//求解</span></div><div class="line">…</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;<span class="comment">//枚举所有状态</span></div><div class="line"><span class="keyword">if</span>(flag[i] == <span class="number">2</span>)&#123;<span class="comment">//是否两个图都能到达状态i</span></div><div class="line"><span class="keyword">int</span> t = f[i];<span class="comment">//记录两个图到达i的变换花费</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++)&#123;<span class="comment">//枚举所有顶点</span></div><div class="line"><span class="comment">//判断i的第j个顶点是否是奇度点</span></div><div class="line"><span class="keyword">if</span>((i &amp; (<span class="number">1</span>&lt;&lt;j)) &gt; <span class="number">0</span>)&#123;</div><div class="line">t += cross[j];<span class="comment">//若是则复制两图j点间的这条边</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">ans = min(ans, t);<span class="comment">//每次用两图间的边补全状态i,更新答案</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">…</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;未来的火车网络建设&quot;&gt;&lt;a href=&quot;#未来的火车网络建设&quot; class=&quot;headerlink&quot; title=&quot;未来的火车网络建设&quot;&gt;&lt;/a&gt;未来的火车网络建设&lt;/h1&gt;&lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="欧拉图" scheme="http://yoursite.com/tags/%E6%AC%A7%E6%8B%89%E5%9B%BE/"/>
    
      <category term="最短路径" scheme="http://yoursite.com/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/"/>
    
      <category term="状态压缩" scheme="http://yoursite.com/tags/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9/"/>
    
  </entry>
  
  <entry>
    <title>[读薄系列]匈牙利算法</title>
    <link href="http://yoursite.com/2017/03/08/%E6%B5%85%E6%9E%90%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2017/03/08/浅析匈牙利算法/</id>
    <published>2017-03-08T14:23:14.000Z</published>
    <updated>2017-03-24T15:04:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二分图"><a href="#二分图" class="headerlink" title="二分图"></a>二分图</h2><h3 id="1-什么是二分图"><a href="#1-什么是二分图" class="headerlink" title="1.什么是二分图"></a>1.什么是二分图</h3><ul><li>将无向图G=<v,e>的顶点集V分为两个子集V<sub>1</sub>和V<sub>2</sub></v,e></li><li>G中的任意一条边的两个端点一个属于V<sub>1</sub>，另一个属于V<sub>2</sub></li></ul><p><img src="http://ww2.sinaimg.cn/mw690/7afe6825gw1f261swoly7j208l08caad.jpg" alt=""></p><h3 id="2-如何判断一个图是二分图"><a href="#2-如何判断一个图是二分图" class="headerlink" title="2.如何判断一个图是二分图"></a>2.如何判断一个图是二分图</h3><p>染色法：开始对任意一未染色的顶点染色，之后判断其相邻的顶点中，若未染色则将其染上和相邻顶点不同的颜色， 若已经染色且颜色和相邻顶点的颜色相同则说明不是二分图，若颜色不同则继续判断。</p><h2 id="匈牙利算法-二分图的最大匹配"><a href="#匈牙利算法-二分图的最大匹配" class="headerlink" title="匈牙利算法-二分图的最大匹配"></a>匈牙利算法-二分图的最大匹配</h2><h3 id="1-匹配是什么"><a href="#1-匹配是什么" class="headerlink" title="1.匹配是什么"></a>1.匹配是什么</h3><p>在图论中，一个<strong>匹配</strong>（matching）是一个边的集合，其中任意两条边都没有公共顶点。所以最大匹配也就是拥有边数最多的那个集合。</p><h3 id="2-交替路"><a href="#2-交替路" class="headerlink" title="2.交替路"></a>2.交替路</h3><p>从一个未匹配的点出发，依次经过非匹配边，匹配边，非匹配边…形成的路径</p><h3 id="3-增广路"><a href="#3-增广路" class="headerlink" title="3.增广路"></a>3.增广路</h3><p>1.定义：从一个未匹配点出发，走交替路，如果途径另一个未匹配点，则这条交替路称为增广路<br>2.特点：</p><ul><li>非匹配边比匹配边多一条（因为起始和终止都是非匹配边）</li><li>起点和终点都是当前未匹配的点，其他的点都是已匹配的点</li><li>整条路径都没有重复的点</li><li>把增广路径上的所有第奇数条边加入到原匹配中去，并把增广路径中的所有第偶数条边从原匹配中删除（这个操作称为增广路径的取反），则新的匹配数就比原匹配数增加了1个</li></ul><p>####4.匈牙利算法的步骤<br><strong>情景假设</strong>：今晚有个舞会，四个男生，四个女生。男生可以邀请女生一起跳舞，并且男生开始前已经有心仪的对象（图中连线代表对该女生有意思）</p><p><img src="http://ww1.sinaimg.cn/mw690/7afe6825gw1f277w0vcg9j20cs09uwet.jpg" alt=""><br>将实线改成虚线，表示现在还没有人邀请成功。<br><img src="http://ww1.sinaimg.cn/mw690/7afe6825gw1f277w2qmtpj20bw093t90.jpg" alt=""><br>第一个男生有两个心仪的女生（芙蓉，赵四），按照顺序，他先邀请了第一个心仪女生（芙蓉），而该女生此时还没有接受其他人的邀请，此时邀请成功，并将该女生的搭档记录为该男生<br><img src="http://ww2.sinaimg.cn/mw690/7afe6825gw1f277w370k8j20c40950t1.jpg" alt=""><br>接下来轮到第二个男生，按照刚才的步骤成功邀请到翠花<br><img src="http://ww3.sinaimg.cn/mw690/7afe6825gw1f277w3i0j0j20c1095aad.jpg" alt=""><br>轮到第三个男生的时候出现了点小状况，他心仪的第一个对象已经被其他人邀请走了（翠花已经个俊杰搭档），此时第三个男生尝试去说服翠花接受他的邀请，翠花只能去问她当前的搭档俊杰，让他去找其他女生，但是俊杰心仪的对象只有一个，就是翠花，俊杰不同意，最后翠花只能拒绝了进进的邀请。</p><p>第三个男生尝试去邀请他的第二个心仪对象，发现该女生也被其他人邀请走了（芙蓉和朝钧搭档），按照老套路，芙蓉去跟朝钧协商，朝钧去邀请他第二个心仪的女生，发现该女生还没有搭档，因此朝钧答应了不再和芙蓉搭档而是和赵四搭档，此时芙蓉就可以和进进搭档了。<br><img src="http://ww4.sinaimg.cn/mw690/7afe6825gw1f277w5ay7vj20bt090jrp.jpg" alt=""><br>更新搭档关系<br><img src="http://ww3.sinaimg.cn/mw690/7afe6825gw1f277w5p5w4j20c1098wer.jpg" alt=""></p><p><img src="http://ww3.sinaimg.cn/mw690/7afe6825gw1f277w71q0bj20bz09aq38.jpg" alt=""></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//二维数组实现</span></div><div class="line"></div><div class="line">===============================================</div><div class="line"></div><div class="line"><span class="keyword">int</span> ans;</div><div class="line"></div><div class="line"><span class="keyword">int</span> k,n,m;</div><div class="line"></div><div class="line"><span class="keyword">int</span> vis[MAXN];</div><div class="line"></div><div class="line"><span class="keyword">int</span> link[MAXN];</div><div class="line"></div><div class="line"><span class="keyword">int</span> Graph[MAXN][MAXN];</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">FindPath</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">1</span>;v&lt;=n;v++)&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(Graph[u][v]==<span class="number">1</span>&amp;&amp;vis[v]==<span class="number">0</span>)&#123;</div><div class="line"></div><div class="line">            vis[v]=<span class="number">1</span>;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(link[v]==<span class="number">-1</span>||FindPath(link[v]))&#123;</div><div class="line"></div><div class="line">                link[v]=u;</div><div class="line"></div><div class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">hungary</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="built_in">memset</span>(link,<span class="number">-1</span>,<span class="keyword">sizeof</span>(link));</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</div><div class="line"></div><div class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(FindPath(i))</div><div class="line"></div><div class="line">          ans++;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">==================================================</div><div class="line"></div><div class="line"><span class="comment">//邻接表优化</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> ans;</div><div class="line"></div><div class="line"><span class="keyword">int</span> k,n,m;</div><div class="line"></div><div class="line"><span class="keyword">int</span> vis[MAXN];</div><div class="line"></div><div class="line"><span class="keyword">int</span> link[MAXN];</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; Graph[MAXN];</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;MAXN;i++)</div><div class="line"></div><div class="line">      Graph[i].clear();</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">FindPath</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;Graph[u].size();i++)&#123;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> v = Graph[u][i];</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(vis[v]==<span class="number">0</span>)&#123;</div><div class="line"></div><div class="line">            vis[v]=<span class="number">1</span>;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(link[v]==<span class="number">-1</span>||FindPath(link[v]))&#123;</div><div class="line"></div><div class="line">                link[v]=u;</div><div class="line"></div><div class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">hungary</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="built_in">memset</span>(link,<span class="number">-1</span>,<span class="keyword">sizeof</span>(link));</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</div><div class="line"></div><div class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(FindPath(i))</div><div class="line"></div><div class="line">          ans++;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;二分图&quot;&gt;&lt;a href=&quot;#二分图&quot; class=&quot;headerlink&quot; title=&quot;二分图&quot;&gt;&lt;/a&gt;二分图&lt;/h2&gt;&lt;h3 id=&quot;1-什么是二分图&quot;&gt;&lt;a href=&quot;#1-什么是二分图&quot; class=&quot;headerlink&quot; title=&quot;1.什么是
      
    
    </summary>
    
    
      <category term="读薄系列" scheme="http://yoursite.com/tags/%E8%AF%BB%E8%96%84%E7%B3%BB%E5%88%97/"/>
    
      <category term="匈牙利算法" scheme="http://yoursite.com/tags/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/"/>
    
      <category term="二分图的最大匹配" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%88%86%E5%9B%BE%E7%9A%84%E6%9C%80%E5%A4%A7%E5%8C%B9%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>关系数据理论</title>
    <link href="http://yoursite.com/2017/02/24/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93-%E8%8C%83%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/02/24/关系数据库-范式/</id>
    <published>2017-02-24T14:16:17.000Z</published>
    <updated>2018-02-08T06:15:10.533Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="一-问题的提出"><a href="#一-问题的提出" class="headerlink" title="一.问题的提出"></a>一.问题的提出</h2><h3 id="1-数据冗余导致的问题"><a href="#1-数据冗余导致的问题" class="headerlink" title="1.数据冗余导致的问题"></a>1.数据冗余导致的问题</h3><ol><li>冗余存储: 信息被重复存储</li><li>更新异常: 当重复信息的一个副本被修改时,要对所有副本进行同样的修改</li><li>插入异常: 只有当一些信息事先已经存放在数据库中时,另外一些信息才能存入数据库中</li><li>删除异常: 删除某些信息时可能丢失其他信息</li></ol><h3 id="2-模式分解导致的问题"><a href="#2-模式分解导致的问题" class="headerlink" title="2.模式分解导致的问题"></a>2.模式分解导致的问题</h3><ol><li>有损分解: 通过连接分解后的较小关系不能完全还原被分解关系的所有实例</li><li>依赖丢失: 部分属性之间的依赖丢失</li></ol><h2 id="二-函数依赖的定义"><a href="#二-函数依赖的定义" class="headerlink" title="二.函数依赖的定义"></a>二.函数依赖的定义</h2><h3 id="1-函数依赖"><a href="#1-函数依赖" class="headerlink" title="1.函数依赖"></a>1.函数依赖</h3><blockquote><p>关系模式中属性之间存在的一种约束关系</p></blockquote><p>设r(R)为关系模式,α⊆R,γ⊆R,对任意合法关系r及其中任意两个元祖t<sub>i</sub>和t<sub>j</sub>,i≠j,若t<sub>i</sub>[α]=t<sub>j</sub>[α],则t<sub>i</sub>[γ]=t<sub>j</sub>[γ],则称α函数确定γ,或γ函数依赖于α,记作α→γ<br>简单来说就像函数y=f(x),x唯一确定y<br><img src="http://okc9ihakz.bkt.clouddn.com/%E5%87%BD%E6%95%B0%E4%BE%9D%E8%B5%96.png" alt="函数依赖"></p><h3 id="2-平凡与非平凡函数依赖"><a href="#2-平凡与非平凡函数依赖" class="headerlink" title="2.平凡与非平凡函数依赖"></a>2.平凡与非平凡函数依赖</h3><p><strong>非平凡函数依赖</strong>:若α→γ,但γ不是α的真子集,则称α→γ是非平凡函数依赖<br><img src="http://okc9ihakz.bkt.clouddn.com/%E5%87%BD%E6%95%B0%E4%BE%9D%E8%B5%96.png" alt="函数依赖"><br><strong>平凡函数依赖</strong>:如γ是α的真子集,则称α→γ是平凡函数依赖<br><img src="http://okc9ihakz.bkt.clouddn.com/%E5%B9%B3%E5%87%A1%E4%BE%9D%E8%B5%96.png" alt="平凡函数依赖"></p><h3 id="3-完全函数依赖和部分函数依赖"><a href="#3-完全函数依赖和部分函数依赖" class="headerlink" title="3.完全函数依赖和部分函数依赖"></a>3.完全函数依赖和部分函数依赖</h3><blockquote><p>对于任意γ⊂α,γ→β都不成立,则称α→β是完全函数依赖,否则称部分函数依赖</p></blockquote><p>部分函数依赖<br><img src="http://okc9ihakz.bkt.clouddn.com/%E9%83%A8%E5%88%86%E4%BE%9D%E8%B5%96.png" alt="部分函数依赖"></p><h3 id="4-传递函数依赖"><a href="#4-传递函数依赖" class="headerlink" title="4.传递函数依赖"></a>4.传递函数依赖</h3><blockquote><p>若α→β,β→γ,则必存在函数依赖α→γ</p></blockquote><p><img src="http://okc9ihakz.bkt.clouddn.com/%E4%BC%A0%E9%80%92%E5%87%BD%E6%95%B0%E4%BE%9D%E8%B5%96.png" alt="传递函数依赖"></p><h2 id="三-范式"><a href="#三-范式" class="headerlink" title="三.范式"></a>三.范式</h2><blockquote><p>基于函数依赖理论,关系模式可分成第一范式(1NF),第二范式(2NF),第三范式(3NF)和Boyce-Codd范式</p></blockquote><h3 id="1-目标"><a href="#1-目标" class="headerlink" title="1.目标"></a>1.目标</h3><ol><li>减少数据冗余</li><li>消除异常（插入异常，更新异常，删除异常）</li></ol><h3 id="2-第一范式-码"><a href="#2-第一范式-码" class="headerlink" title="2.第一范式-码"></a>2.第一范式-码</h3><p><strong>每个属性都不可再分</strong></p><table><thead><tr><th>学号</th><th>姓名</th><th>系名</th><th>系主任</th><th>课名</th><th>分数</th></tr></thead><tbody><tr><td></td></tr></tbody></table><h4 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h4><p> <strong>1.插入异常</strong>：当出现新的系时，无法单独地添加系名与系主任的数据到数据表中<br> <strong>2.更新异常</strong>：当某个学生转系时，需要将与该学生有关的记录一起修改<br> <strong>3.删除异常</strong>：当某个系的所有学生删除时，该系也不复存在（一个系所有学生都没有了，并不表示这个系就没有了）<br> <strong>4.数据冗余</strong>：每一名学生的学号、姓名、系名、系主任这些数据重复多次</p><h3 id="3-第二范式-全部是码"><a href="#3-第二范式-全部是码" class="headerlink" title="3.第二范式-全部是码"></a>3.第二范式-全部是码</h3><p><strong>消除非主属性对码的部分函数依赖</strong><br><strong>简单的说，是表中的属性必须完全依赖于全部主键，而不是部分主键</strong></p><p><strong>判断是否符合2NF的方法</strong><br>上表为例</p><ol><li>确定码（学号，课名）</li><li>确定非主属性（系名，系主任，课名，分数）</li><li>查看是否存在非主属性对码的部分函数依赖{<br>对于<strong>（学号，课名） → 姓名</strong>，有 <strong>学号 → 姓名</strong>，存在非主属性 姓名 对码（学号，课名）的部分函数依赖。<br>对于<strong>（学号，课名） → 系名</strong>，有 <strong>学号 → 系名</strong>，存在非主属性 系名 对码（学号，课名）的部分函数依赖。<br>对于<strong>（学号，课名） → 系主任</strong>，有<strong>学号 → 系主任</strong>，存在非主属性 对码（学号，课名）的部分函数依赖。<br>}</li></ol><p>所以该表只符合1NF,不符合2NF</p><h4 id="模式分解"><a href="#模式分解" class="headerlink" title="模式分解"></a>模式分解</h4><p>将上述表拆分成两个表</p><table><thead><tr><th>学号</th><th>姓名</th><th>系名 </th></tr></thead><tbody><tr><td></td></tr></tbody></table><p>码：（学号，姓名）</p><table><thead><tr><th>学号</th><th>姓名</th><th>系名</th><th>系主任</th></tr></thead><tbody><tr><td></td></tr></tbody></table><p>码：（学号）因为码只有一个属性，所以不可能存在非主属性对于码 的部分函数依赖，所以此表符合2NF的要求</p><h4 id="出现的问题-1"><a href="#出现的问题-1" class="headerlink" title="出现的问题"></a>出现的问题</h4><p><strong>1.删除异常</strong>：删除某个系中所有的学生记录，该系的信息仍然全部丢失<br><strong>2.插入异常</strong>：无法插入一个尚无学生的新系的信息。因为学生表的码是学号，不能为空，所以此操作不被允许</p><h3 id="4-第三范式-仅仅是码"><a href="#4-第三范式-仅仅是码" class="headerlink" title="4.第三范式-仅仅是码"></a>4.第三范式-仅仅是码</h3><p><strong>消除了非主属性对于码的传递函数依赖</strong></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>作者：刘慰<br>链接：<a href="https://www.zhihu.com/question/24696366/answer/29189700" target="_blank" rel="external">https://www.zhihu.com/question/24696366/answer/29189700</a><br>来源：知乎</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;一-问题的提出&quot;&gt;&lt;a href=&quot;#一-问题的提出&quot; class=&quot;headerlink&quot; title=&quot;一.问题的提出&quot;&gt;&lt;/a&gt;一.问题的提出&lt;/h2&gt;&lt;h3 id=&quot;1-数据冗余导致的问题&quot;&gt;&lt;a href=&quot;#1-数据
      
    
    </summary>
    
    
      <category term="review" scheme="http://yoursite.com/tags/review/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode486. Predict the Winner</title>
    <link href="http://yoursite.com/2017/02/23/LeetCode486-Predict-the-Winner/"/>
    <id>http://yoursite.com/2017/02/23/LeetCode486-Predict-the-Winner/</id>
    <published>2017-02-23T15:05:05.000Z</published>
    <updated>2017-02-23T15:23:05.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/predict-the-winner/?tab=Description" target="_blank" rel="external">题目传送门</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>两个人交替从一个数组两端获取一个数字，每次每个人只能获取一个，最终获取的数字之和最大的获胜，问第一个人能否获胜？</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><strong>最优子结构</strong>：<code>dp[i][j]</code>维护从i到j获取的所有数字之和的最大值，则dp[i+1][j]表示第二个人能够在i-1到j之间获取的所有数字之和的最大值，dp[i][j-1]表示第二个人能够在i到j-1之间获取的所有数字之和的最大值。</p><p><code>sum[i][j]</code>维护 i 到 j 所有数字之和，因为两个人都想赢，即每个人都取最优解，所以sum[i+1][j] - dp[i+1][j]表示第一个人取第i个元素以后，能够在 i+1 到 j 之间获取子数组之和的最大值，sum[i][j-1] - dp[i][j-1]标识第一个人取第j个元素以后，能够在 i 到 j-1 之间获取子数组之和的最大值。</p><p><strong>状态转移方程</strong>：<br><strong>dp[i][j] = max{ nums[i]+sum[i+1][j]-dp[i+1][j], nums[j]+sum[i][j-1]-dp[i][j-1]}</strong><br>当i == j时，只有一种选择，dp[i][j] = nums[i]<br>当i == j-1 时，只有两种选择，dp[i][j] = max(nums[i], nums[j])</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">PredictTheWinner</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> n = nums.length;</div><div class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n][n];</div><div class="line">        <span class="keyword">int</span>[] presum = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++) &#123;</div><div class="line">            presum[i+<span class="number">1</span>] = presum[i]+nums[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> len = <span class="number">1</span>;len &lt;= n;len++)<span class="comment">//长度为n的最优解需要用到长度为n-1的最优解</span></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> l = <span class="number">0</span>;l + len - <span class="number">1</span> &lt; n;l++)&#123;</div><div class="line">                <span class="keyword">int</span> r = l + len - <span class="number">1</span>;</div><div class="line">                <span class="keyword">if</span>(l==r)&#123;</div><div class="line">                    dp[l][r] = nums[l];</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(l == r-<span class="number">1</span>)&#123;</div><div class="line">                    dp[l][r] = Math.max(nums[l],nums[r]);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span>&#123;</div><div class="line">                    dp[l][r] = Math.max(nums[l]+presum[r+<span class="number">1</span>]-presum[l+<span class="number">1</span>]-dp[l+<span class="number">1</span>][r],</div><div class="line">                                        nums[r]+presum[r]-presum[l]-dp[l][r-<span class="number">1</span>]);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][n-<span class="number">1</span>]*<span class="number">2</span>&gt;=presum[n];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/predict-the-winner/?tab=Description&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;题目传送门&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意&quot;&gt;&lt;a h
      
    
    </summary>
    
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>[Codeforces731B]Coupons and Discounts</title>
    <link href="http://yoursite.com/2017/02/17/Codeforces731B-Coupons-and-Discounts/"/>
    <id>http://yoursite.com/2017/02/17/Codeforces731B-Coupons-and-Discounts/</id>
    <published>2017-02-17T05:46:36.000Z</published>
    <updated>2017-02-17T05:57:49.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://codeforces.com/contest/731/problem/B" target="_blank" rel="external">题目传送门</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>n个数字，两种操作</p><ol><li>相邻两个数加1</li><li>一个数加2</li></ol><p>问能不能根据这些操作构成这些数字</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>贪心一下，能放2就放2，所以偶数转成2，奇数转成1，0还是0<br>遍历一遍</p><ol><li>如果当前是1，则下一个数减1，再判断下一个数是否小于0</li><li>如果当前是2，直接减2</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 200005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> num[MAXN];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">int</span> flag;</div><div class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n) &#123;</div><div class="line">flag = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num[i]);</div><div class="line"><span class="keyword">if</span> (num[i] != <span class="number">0</span>) &#123;</div><div class="line"><span class="keyword">if</span> (num[i] % <span class="number">2</span>)</div><div class="line">num[i] = <span class="number">1</span>;</div><div class="line"><span class="keyword">else</span></div><div class="line">num[i] = <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</div><div class="line"><span class="keyword">if</span> (num[i] == <span class="number">1</span>) &#123;</div><div class="line">num[i]--;</div><div class="line">num[i + <span class="number">1</span>]--;</div><div class="line"><span class="keyword">if</span> (num[i + <span class="number">1</span>] &lt; <span class="number">0</span>) &#123;</div><div class="line">flag = <span class="number">1</span>;</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (num[i] == <span class="number">2</span>) &#123;</div><div class="line">num[i] -= <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (num[n] == <span class="number">1</span>)</div><div class="line">flag = <span class="number">1</span>;</div><div class="line"><span class="keyword">if</span> (flag)</div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"><span class="keyword">else</span></div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://codeforces.com/contest/731/problem/B&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;题目传送门&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;heade
      
    
    </summary>
    
    
      <category term="CodeForces" scheme="http://yoursite.com/tags/CodeForces/"/>
    
  </entry>
  
</feed>
